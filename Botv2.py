#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PtoShkinDSU_bot ‚Äî Telegram-–±–æ—Ç (python-telegram-bot v20+)

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- FAQ –∏–∑ Excel (data/faq.xlsx), –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ¬´–æ—Å–æ–±—ã—Ö¬ª –≤–∫–ª–∞–¥–æ–∫ A/B/C/D.
- –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: /post (—Å caption –∏ ¬´–æ–∂–∏–¥–∞–Ω–∏–µ–º¬ª –≤–ª–æ–∂–µ–Ω–∏–π –¥–æ 3 –º–∏–Ω—É—Ç), /send, /publish (—Ç–æ–ª—å–∫–æ ¬´—Å–≤–æ—ë¬ª), /settarget.
- –¢–µ–º—ã (—Ñ–æ—Ä—É–º—ã): /bindhere (–ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ), /settopic <thread_id|0> (—Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞/—Å–±—Ä–æ—Å).
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —Ç–µ–∫—Å—Ç ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º, –ª–æ–≥ –≤ CSV (—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é).
- –ê—É–¥–∏—Ç: –ª–æ–≥ –≤ data/audit.csv –∏ (–æ–ø—Ü.) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ AUDIT_CHAT_ID ‚Äî –∫—Ç–æ –∑–∞—Ö–æ–¥–∏–ª, —á—Ç–æ —Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ –ø—É–±–ª–∏–∫–æ–≤–∞–ª.
- /deleteme: —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–∫–∞–∫ –æ—Ç–≤–µ—Ç ‚Äî —É–¥–∞–ª–∏—Ç —Ü–µ–ª—å –∏ –∫–æ–º–∞–Ω–¥—É; –∏–Ω–∞—á–µ ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É). –î–∞—ë—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.
- Privacy Mode OFF: –∫–æ–º–∞–Ω–¥—ã/–¥–∏–∞–ª–æ–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°; –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–¥—É—Ç –≤ TARGET_CHAT_ID(+–æ–ø—Ü. thread).
- /getchat –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ: –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç chat_id –≤ –ª–∏—á–∫—É –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ.

–¢—Ä–µ–±—É–µ—Ç—Å—è: python-telegram-bot>=20, pandas, openpyxl, python-dotenv
"""

import os
import re
import time
import html
import logging
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple
from pathlib import Path

import pandas as pd
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, Application, ContextTypes,
    CommandHandler, MessageHandler, filters
)

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env!")

BASE_DIR = Path(__file__).resolve().parent
DATA_DIR = BASE_DIR / "data"
XLSX_PATH = Path(os.getenv("FAQ_XLSX_PATH") or (DATA_DIR / "faq.xlsx"))

# –¶–µ–ª–µ–≤–æ–π —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")  # "-100..." –∏–ª–∏ "@channelusername"
TARGET_CHAT_FILE = DATA_DIR / "target_chat.txt"

# –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–∞ (forum topic) –≤ –≥—Ä—É–ø–ø–µ
TARGET_THREAD_ID: Optional[int] = None
TARGET_THREAD_FILE = DATA_DIR / "target_thread.txt"

# –ê–¥–º–∏–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π
POST_ADMINS = {int(x) for x in (os.getenv("POST_ADMINS") or "").replace(" ", "").split(",") if x}

# –ö—É–¥–∞ —Å–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
SUGGEST_CHAT_ID = os.getenv("SUGGEST_CHAT_ID")  # –º–æ–∂–Ω–æ –ø—É—Å—Ç–æ ‚Äî —Ç–æ–≥–¥–∞ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∞–º
SUGGEST_ADMINS = {int(x) for x in (os.getenv("SUGGEST_ADMINS") or "").replace(" ", "").split(",") if x} or POST_ADMINS

# –ê—É–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–ø—Ü. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
AUDIT_CHAT_ID = os.getenv("AUDIT_CHAT_ID")  # –º–æ–∂–Ω–æ –ø—É—Å—Ç–æ ‚Äî —Ç–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ CSV
AUDIT_CSV = DATA_DIR / "audit.csv"

# –õ–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
SUGGESTIONS_CSV = DATA_DIR / "suggestions.csv"

# –û—Å–æ–±—ã–µ –ª–∏—Å—Ç—ã Excel
SPECIAL_BCD_SHEETS = {"–î–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–°–î–ü)", "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤"}

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
logger = logging.getLogger("FAQBot")

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ /post
MAX_POST_WAIT_SEC = 180  # 3 –º–∏–Ω—É—Ç—ã

# ---------- –ö–Ω–æ–ø–æ—á–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
BTN_HELLO = "üêª –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"
BTN_ASK   = "‚ùì –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å"
BTN_SUGG  = "üí° –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"
BTN_HOWTO = "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"
BTN_BACK  = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å / –ª–∏–º–∏—Ç—ã ----------
STEM_SAFE = re.compile(r"^[\w\-\s\.]+$", re.IGNORECASE)
RATE_LIMIT = {"suggest_per_min": 2}
_last_suggest_at: Dict[int, List[float]] = {}

def _is_safe_stem(s: str) -> bool:
    return bool(STEM_SAFE.match(s or ""))

def _rate_limit_suggest(user_id: int) -> bool:
    now = time.time()
    window = 60
    bucket = _last_suggest_at.setdefault(user_id, [])
    while bucket and now - bucket[0] > window:
        bucket.pop(0)
    if len(bucket) >= RATE_LIMIT["suggest_per_min"]:
        return False
    bucket.append(now)
    return True

def _sanitize_for_csv(s: str) -> str:
    if not s:
        return ""
    s = s.replace("\r", " ").replace("\n", " ").strip()
    return "'" + s if s[:1] in ("=", "+", "-", "@") else s

def _is_private(update: Update) -> bool:
    return update.effective_chat and update.effective_chat.type == "private"

def _is_post_admin(user_id: int) -> bool:
    return user_id in POST_ADMINS

def _ensure_data_dir():
    DATA_DIR.mkdir(parents=True, exist_ok=True)

def _load_target_chat():
    global TARGET_CHAT_ID
    try:
        if TARGET_CHAT_FILE.exists():
            val = TARGET_CHAT_FILE.read_text(encoding="utf-8").strip()
            if val:
                TARGET_CHAT_ID = val
                logger.info("[CONFIG] –ó–∞–≥—Ä—É–∂–µ–Ω TARGET_CHAT_ID –∏–∑ —Ñ–∞–π–ª–∞: %s", val)
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å target_chat.txt")

def _save_target_chat(chat_id: str):
    try:
        _ensure_data_dir()
        TARGET_CHAT_FILE.write_text(chat_id, encoding="utf-8")
        logger.info("[CONFIG] –°–æ—Ö—Ä–∞–Ω—ë–Ω TARGET_CHAT_ID: %s", chat_id)
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å target_chat.txt")

def _load_target_thread():
    global TARGET_THREAD_ID
    try:
        if TARGET_THREAD_FILE.exists():
            val = TARGET_THREAD_FILE.read_text(encoding="utf-8").strip()
            if val:
                TARGET_THREAD_ID = int(val)
                logger.info("[CONFIG] –ó–∞–≥—Ä—É–∂–µ–Ω TARGET_THREAD_ID –∏–∑ —Ñ–∞–π–ª–∞: %s", val)
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å target_thread.txt")

def _save_target_thread(thread_id: Optional[int]):
    try:
        _ensure_data_dir()
        if thread_id is None:
            if TARGET_THREAD_FILE.exists():
                TARGET_THREAD_FILE.unlink(missing_ok=True)
            logger.info("[CONFIG] –°–±—Ä–æ—à–µ–Ω TARGET_THREAD_ID")
        else:
            TARGET_THREAD_FILE.write_text(str(thread_id), encoding="utf-8")
            logger.info("[CONFIG] –°–æ—Ö—Ä–∞–Ω—ë–Ω TARGET_THREAD_ID: %s", thread_id)
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å target_thread.txt")

def _thread_kwargs():
    return {"message_thread_id": TARGET_THREAD_ID} if TARGET_THREAD_ID else {}

# ---------- –ê—É–¥–∏—Ç ----------
def _audit_row(event: str, update: Optional[Update], details: str = "") -> List[str]:
    import datetime
    ts = datetime.datetime.now().isoformat(timespec="seconds")
    uid = update.effective_user.id if (update and update.effective_user) else ""
    uname = (f"@{update.effective_user.username}" if (update and update.effective_user and update.effective_user.username)
             else (update.effective_user.full_name if (update and update.effective_user) else ""))
    chat_id = update.effective_chat.id if (update and update.effective_chat) else ""
    chat_type = update.effective_chat.type if (update and update.effective_chat) else ""
    return [ts, str(uid), uname, str(chat_id), chat_type, event, details]

def _audit_to_csv(row: List[str]):
    import csv
    _ensure_data_dir()
    new = not AUDIT_CSV.exists()
    with open(AUDIT_CSV, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f, delimiter=";")
        if new:
            w.writerow(["timestamp", "user_id", "username", "chat_id", "chat_type", "event", "details"])
        row[2] = _sanitize_for_csv(row[2])
        row[6] = _sanitize_for_csv(row[6])
        w.writerow(row)

async def _audit_notify(context: ContextTypes.DEFAULT_TYPE, row: List[str]):
    if not AUDIT_CHAT_ID:
        return
    ts, uid, uname, chat_id, chat_type, event, details = row
    try:
        msg = (
            f"üìù <b>–ê—É–¥–∏—Ç</b>\n"
            f"–°–æ–±—ã—Ç–∏–µ: <b>{html.escape(event)}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{uid}</code> {html.escape(uname)}\n"
            f"–ß–∞—Ç: <code>{chat_id}</code> ({chat_type})\n"
            f"–î–µ—Ç–∞–ª–∏: {html.escape(details) if details else '‚Äî'}\n"
            f"–í—Ä–µ–º—è: {ts}"
        )
        await context.bot.send_message(chat_id=AUDIT_CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

async def _audit(event: str, update: Optional[Update], context: Optional[ContextTypes.DEFAULT_TYPE], details: str = ""):
    row = _audit_row(event, update, details)
    _audit_to_csv(row)
    if context:
        await _audit_notify(context, row)

# ---------- –ú–æ–¥–µ–ª—å ----------
@dataclass
class FAQItem:
    question: str
    answer: Optional[str] = None
    answer_1: Optional[str] = None
    answer_2: Optional[str] = None
    comment: Optional[str] = None
    files: Optional[List[str]] = None

    def render(self) -> str:
        parts: List[str] = []
        if self.answer_1:
            parts.append(f"<b>–û—Ç–≤–µ—Ç 1:</b> {self.answer_1}")
        if self.answer_2:
            parts.append(f"<b>–û—Ç–≤–µ—Ç 2:</b> {self.answer_2}")
        if self.comment:
            parts.append(f"<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</i> {self.comment}")
        if self.answer and not parts:
            parts.append(self.answer)
        if not parts:
            parts.append("–û—Ç–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return "\n\n".join(parts)

# ---------- –£—Ç–∏–ª–∏—Ç—ã Excel/FAQ ----------
def _norm(s: str) -> str:
    return (s or "").strip()

def _pick_one_column(cols: List[str], keywords: List[str]) -> Optional[str]:
    low = [c.lower() for c in cols]
    for kw in keywords:
        kw = kw.lower()
        for i, name in enumerate(low):
            if kw in name:
                return cols[i]
    return None

def _pick_many_columns(cols: List[str], keywords: List[str], exclude: Optional[str] = None) -> List[str]:
    found = []
    for col in cols:
        if exclude and col == exclude:
            continue
        name = col.lower()
        if any(kw.lower() in name for kw in keywords):
            found.append(col)
    return found

def _split_files_cell(val: str) -> List[str]:
    if not val:
        return []
    raw = re.split(r"[,\n;]+", val)
    return [s.strip() for s in raw if s.strip()]

def _split_post_stems(val: str) -> List[str]:
    if not val:
        return []
    raw = re.split(r"[,\n;]+", val)
    return [s.strip() for s in raw if s.strip()]

FILE_INDEX: Dict[str, Path] = {}

def _build_file_index():
    FILE_INDEX.clear()
    if DATA_DIR.exists():
        for p in DATA_DIR.iterdir():
            if p.is_file():
                FILE_INDEX[p.stem.lower()] = p
                FILE_INDEX[p.name.lower()] = p

def _find_files_by_stem_fast(stem: str) -> List[Path]:
    s = (stem or "").lower().strip()
    if not s:
        return []
    out: List[Path] = []
    if s in FILE_INDEX:
        out.append(FILE_INDEX[s])
        return out
    for key, path in FILE_INDEX.items():
        if key.startswith(s):
            out.append(path)
    seen = set()
    uniq = []
    for p in out:
        if p not in seen:
            uniq.append(p); seen.add(p)
    return uniq

def _append_suggestion(chat_id: int, user_id: int, username: Optional[str], text: str):
    import csv, datetime
    _ensure_data_dir()
    is_new = not SUGGESTIONS_CSV.exists()
    with open(SUGGESTIONS_CSV, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f, delimiter=";")
        if is_new:
            w.writerow(["timestamp", "chat_id", "user_id", "username", "suggestion"])
        safe = _sanitize_for_csv(text)
        w.writerow([datetime.datetime.now().isoformat(timespec="seconds"), chat_id, user_id, username or "", safe])

async def _notify_about_suggestion(context: ContextTypes.DEFAULT_TYPE, text: str, from_user: str):
    safe_text = html.escape(text)
    msg = f"üÜï <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n–û—Ç: {from_user}\n\n{safe_text}"
    delivered = False
    if SUGGEST_CHAT_ID:
        try:
            await context.bot.send_message(chat_id=SUGGEST_CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
            delivered = True
            logger.info("[SUGGEST] –≤ SUGGEST_CHAT_ID=%s", SUGGEST_CHAT_ID)
        except Exception:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ SUGGEST_CHAT_ID=%s", SUGGEST_CHAT_ID)
    else:
        for uid in SUGGEST_ADMINS:
            try:
                await context.bot.send_message(chat_id=uid, text=msg, parse_mode=ParseMode.HTML)
                delivered = True
                logger.info("[SUGGEST] –∞–¥–º–∏–Ω—É uid=%s", uid)
            except Exception:
                logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É %s", uid)
    if not delivered:
        logger.warning("[SUGGEST] –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é")

async def _send_answer_with_files(update: Update, html_text: str, files: Optional[List[str]]):
    await update.message.reply_html(html_text)
    if not files:
        return
    for stem in files:
        paths = _find_files_by_stem_fast(stem)
        if not paths:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {stem}")
            continue
        file_path = paths[0]
        with open(file_path, "rb") as fh:
            await update.message.reply_document(document=fh, filename=file_path.name, caption=f"üìé {file_path.name}")

async def post_to_group(context: ContextTypes.DEFAULT_TYPE, text: str, files: Optional[List[Path]] = None):
    if not TARGET_CHAT_ID:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TARGET_CHAT_ID –≤ .env –∏ —Ñ–∞–π–ª–µ target_chat.txt")
    if files:
        first, *rest = files
        with open(first, "rb") as f:
            await context.bot.send_document(
                chat_id=TARGET_CHAT_ID, document=f, filename=first.name,
                caption=text, parse_mode=ParseMode.HTML, **_thread_kwargs()
            )
        for p in rest:
            with open(p, "rb") as f:
                await context.bot.send_document(chat_id=TARGET_CHAT_ID, document=f, filename=p.name, **_thread_kwargs())
    else:
        await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=text, parse_mode=ParseMode.HTML, **_thread_kwargs())

# ---------- –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ----------
class FAQRepository:
    def __init__(self, xlsx_path: Path):
        self.xlsx_path = xlsx_path
        self.data: Dict[str, List[FAQItem]] = {}

    def load(self) -> None:
        if not self.xlsx_path.exists():
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {self.xlsx_path}")
        book: Dict[str, pd.DataFrame] = pd.read_excel(
            self.xlsx_path, sheet_name=None, dtype=str, engine="openpyxl"
        )
        normalized: Dict[str, List[FAQItem]] = {}
        for sheet, df in book.items():
            if df is None or df.empty:
                continue
            df = df.fillna("")
            df = df[~(df.apply(lambda r: all((str(x).strip() == "" for x in r)), axis=1))].reset_index(drop=True)
            if sheet.strip() in SPECIAL_BCD_SHEETS:
                items = self._parse_special_bcd(df)
            else:
                items = self._parse_generic(df)
            items = [it for it in items if it.question and it.question.strip()]
            if items:
                normalized[sheet] = items
        if not normalized:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å FAQ –Ω–∏ —Å –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ Excel.")
        self.data = normalized

    def _extract_files_from_row(self, df: pd.DataFrame, row: pd.Series) -> List[str]:
        file_cols = [c for c in df.columns if ("—Ñ–∞–π–ª" in c.lower()) or ("file" in c.lower())]
        if not file_cols:
            return []
        cell = _norm(str(row[file_cols[0]]))
        if not cell or cell.lower() == "nan":
            return []
        return _split_files_cell(cell)

    def _parse_special_bcd(self, df: pd.DataFrame) -> List[FAQItem]:
        if df.shape[1] < 4:
            return []
        items: List[FAQItem] = []
        for _, row in df.iterrows():
            q  = _norm(str(row.iloc[0]))
            a1 = _norm(str(row.iloc[1])) or None
            a2 = _norm(str(row.iloc[2])) or None
            cm = _norm(str(row.iloc[3])) or None
            if not q:
                continue
            files = self._extract_files_from_row(df, row)
            items.append(FAQItem(question=q, answer_1=a1, answer_2=a2, comment=cm, files=files or None))
        return items

    def _parse_generic(self, df: pd.DataFrame) -> List[FAQItem]:
        cols = list(df.columns)
        q_col = _pick_one_column(cols, ["–≤–æ–ø—Ä–æ—Å", "—Ç–µ–º–∞", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∑–∞–≥–æ–ª–æ–≤–æ–∫"]) or cols[0]
        answer_cols = _pick_many_columns(
            cols,
            ["–æ—Ç–≤–µ—Ç", "–æ–ø–∏—Å–∞–Ω–∏–µ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫", "–≥–¥–µ",
             "–∫–æ–Ω—Ç–∞–∫—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "email", "–ø–æ—á—Ç–∞", "—Å—Å—ã–ª–∫–∞", "–∞–¥—Ä–µ—Å", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä"],
            exclude=q_col
        )
        if not answer_cols and len(cols) > 1:
            answer_cols = [cols[1]]
        items: List[FAQItem] = []
        for _, row in df.iterrows():
            q = _norm(str(row[q_col]))
            if not q:
                continue
            parts: List[str] = []
            for c in answer_cols:
                val = _norm(str(row[c]))
                if val and val.lower() != "nan":
                    if len(answer_cols) > 1:
                        parts.append(f"<b>{c}:</b> {val}")
                    else:
                        parts.append(val)
            answer_text = "\n\n".join(parts) if parts else None
            files = self._extract_files_from_row(df, row)
            if answer_text or files:
                items.append(FAQItem(question=q, answer=answer_text, files=files or None))
        return items

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ----------
repo = FAQRepository(XLSX_PATH)
repo.load()
CATEGORIES: List[str] = list(repo.data.keys())
ALL_QUESTIONS: List[Tuple[str, str]] = [(cat, it.question) for cat, items in repo.data.items() for it in items]
USER_CATEGORY: Dict[int, Optional[str]] = {}
USER_FLOW: Dict[int, Optional[str]] = {}
POST_PENDING: Dict[int, Dict[str, object]] = {}  # chat_id -> {"desc": str, "stems": List[str], "ts": float}

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_main() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            [BTN_HELLO, BTN_ASK],
            [BTN_SUGG],
            [BTN_HOWTO]
        ],
        resize_keyboard=True
    )

def kb_categories() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[cat] for cat in CATEGORIES] + [[BTN_BACK]], resize_keyboard=True)

def kb_questions(category: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[it.question] for it in repo.data.get(category, [])] + [[BTN_BACK]], resize_keyboard=True)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: —Å–æ–±—Ä–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è ----------
def _collect_attachments_from_message(update: Update) -> List[Dict[str, str]]:
    msg = update.message
    if not msg:
        return []
    collected: List[Dict[str, str]] = []
    if msg.document:
        collected.append({"type": "document", "file_id": msg.document.file_id, "filename": msg.document.file_name or ""})
    if msg.photo:
        largest = msg.photo[-1]
        collected.append({"type": "photo", "file_id": largest.file_id, "filename": ""})
    return collected

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: –æ—Ç–∫—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏ ¬´Message¬ª.")
        return
    USER_CATEGORY[update.effective_chat.id] = None
    USER_FLOW[update.effective_chat.id] = None
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>PtoShkinDSU_bot</b> ü§ñ\n–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=kb_main(),
        parse_mode=ParseMode.HTML
    )
    await _audit("start", update, context, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –±–æ—Ç–∞")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã: /post /send /publish /settarget /settopic /bindhere /deleteme /reindex /listfiles /myid /getchat\n\n"
        "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ 2 —à–∞–≥–∞:\n"
        "1) /post | –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "2) –°–ª–µ–¥–æ–º –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª(—ã) Excel/PDF/–∫–∞—Ä—Ç–∏–Ω–∫—É (–¥–æ 3 –º–∏–Ω—É—Ç)\n",
        reply_markup=kb_main()
    )
    await _audit("help", update, context, "–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏")

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    uname = f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.full_name
    await update.message.reply_text(f"üë§ –¢–≤–æ–π Telegram ID: {uid}\n–ò–º—è: {uname}")
    await _audit("myid", update, context, "–ü–æ–∫–∞–∑ —Å–≤–æ–µ–≥–æ ID")

async def getchat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    try:
        await context.bot.send_message(chat_id=update.effective_user.id, text=f"chat_id = {chat.id}")
    except Exception:
        await update.message.reply_text(f"chat_id = {chat.id}")
    if chat.type in ("group", "supergroup"):
        try:
            await context.bot.delete_message(chat_id=chat.id, message_id=update.message.message_id)
        except Exception:
            pass
    await _audit("getchat", update, context, f"chat_id={chat.id}")

# /deleteme ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏
async def deleteme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram.error import TelegramError
    import datetime

    chat = update.effective_chat
    msg = update.message

    # —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if chat.type not in ("group", "supergroup"):
        if _is_private(update):
            await msg.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    # —á—Ç–æ —É–¥–∞–ª—è–µ–º: –æ—Ç–≤–µ—Ç ‚Üí —Ü–µ–ª—å; –∏–Ω–∞—á–µ ‚Üí —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    target = msg.reply_to_message or msg
    target_id = target.message_id

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    try:
        me = await context.bot.get_me()
        my_member = await context.bot.get_chat_member(chat.id, me.id)
        status = getattr(my_member, "status", "")
        can_delete = False
        if status == "creator":
            can_delete = True
        elif status == "administrator":
            can_delete = bool(getattr(my_member, "can_delete_messages", False))
        if not can_delete:
            try:
                await msg.reply_text("–ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≥–∞–ª–æ—á–∫–æ–π ¬´–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è¬ª.")
            except Exception:
                pass
            await _audit("deleteme_no_rights", update, context, f"status={status}")
            return
    except TelegramError as e:
        try:
            await msg.reply_text(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")
        except Exception:
            pass
        await _audit("deleteme_rights_error", update, context, str(e))
        return

    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤
    try:
        now = datetime.datetime.now(datetime.timezone.utc)
        tdate = target.date
        if tdate.tzinfo is None:
            tdate = tdate.replace(tzinfo=datetime.timezone.utc)
        age_sec = (now - tdate).total_seconds()
        if age_sec > 48 * 3600:
            try:
                await msg.reply_text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ–ª—å—à–µ 48 —á–∞—Å–æ–≤.")
            except Exception:
                pass
            await _audit("deleteme_too_old", update, context, f"age_sec={int(age_sec)}")
            return
    except Exception as e:
        await _audit("deleteme_age_check_error", update, context, str(e))

    # —É–¥–∞–ª–µ–Ω–∏–µ
    want_delete_command_too = bool(msg.reply_to_message)
    try:
        await context.bot.delete_message(chat_id=chat.id, message_id=target_id)
        if want_delete_command_too:
            try:
                await context.bot.delete_message(chat_id=chat.id, message_id=msg.message_id)
            except Exception:
                pass
        await _audit("deleteme_ok", update, context, f"deleted_msg_id={target_id}; also_cmd={want_delete_command_too}")
    except TelegramError as e:
        try:
            await msg.reply_text(f"‚ùå –ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å: {e}")
        except Exception:
            pass
        await _audit("deleteme_error", update, context, str(e))

async def listfiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    if not DATA_DIR.exists():
        await update.message.reply_text("–ü–∞–ø–∫–∞ data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await _audit("listfiles", update, context, "data/ not found")
        return
    files = [p.name for p in DATA_DIR.iterdir() if p.is_file()]
    if not files:
        await update.message.reply_text("–í –ø–∞–ø–∫–µ data/ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç.")
    else:
        msg = "üìÇ –§–∞–π–ª—ã –≤ data/:\n" + "\n".join(f"‚Ä¢ {f}" for f in files)
        await update.message.reply_text(msg)
    await _audit("listfiles", update, context, f"count={len(files)}")

async def settarget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    uid = update.effective_user.id if update.effective_user else 0
    if uid not in POST_ADMINS:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settarget <chat_id>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /settarget -1002454786265")
        return
    new_id = context.args[0].strip()
    global TARGET_CHAT_ID
    TARGET_CHAT_ID = new_id
    _save_target_chat(new_id)
    await update.message.reply_text(f"‚úÖ TARGET_CHAT_ID –æ–±–Ω–æ–≤–ª—ë–Ω: {new_id}")
    await _audit("settarget", update, context, f"TARGET_CHAT_ID={new_id}")

async def settopic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.")
        return
    uid = update.effective_user.id if update.effective_user else 0
    if uid not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    global TARGET_THREAD_ID
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settopic <thread_id> | /settopic 0 (—Å–±—Ä–æ—Å)")
        return
    try:
        val = int(context.args[0])
    except ValueError:
        await update.message.reply_text("thread_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    TARGET_THREAD_ID = None if val == 0 else val
    _save_target_thread(TARGET_THREAD_ID)
    await update.message.reply_text(f"‚úÖ TARGET_THREAD_ID = {TARGET_THREAD_ID}")
    await _audit("settopic", update, context, f"TARGET_THREAD_ID={TARGET_THREAD_ID}")

async def bindhere(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    uid = update.effective_user.id if update.effective_user else 0
    if chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–í—ã–∑–æ–≤–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –Ω–∞–¥–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
        return
    if uid not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    thread_id = update.message.message_thread_id
    if not thread_id:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –í–ù–£–¢–†–ò —Ç–µ–º—ã (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ç–µ–º).")
        return
    global TARGET_CHAT_ID, TARGET_THREAD_ID
    TARGET_CHAT_ID = str(chat.id)
    _save_target_chat(TARGET_CHAT_ID)
    TARGET_THREAD_ID = int(thread_id)
    _save_target_thread(TARGET_THREAD_ID)
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ —Å—é–¥–∞.\nchat_id={TARGET_CHAT_ID}\nthread_id={TARGET_THREAD_ID}\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–π–¥—É—Ç –≤ —ç—Ç—É —Ç–µ–º—É."
    )
    await _audit("bindhere", update, context, f"chat={TARGET_CHAT_ID}, thread={TARGET_THREAD_ID}")

async def send_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    user_id = update.effective_user.id if update.effective_user else 0
    if not _is_post_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return
    raw = (update.message.text or "").strip()
    payload = raw.split(" ", 1)[1].strip() if " " in raw else ""
    if not payload:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    try:
        await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=payload, parse_mode=ParseMode.HTML, **_thread_kwargs())
        await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        await _audit("send", update, context, f"text_len={len(payload)}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: %s", e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await _audit("send_error", update, context, str(e))

async def publish_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    user_id = update.effective_user.id if update.effective_user else 0
    if not _is_post_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return
    msg = update.message
    if not msg.reply_to_message:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ç–µ–∫—Å—Ç–æ–º/–º–µ–¥–∏–∞), –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
        return
    if not msg.reply_to_message.from_user or msg.reply_to_message.from_user.id != user_id:
        await msg.reply_text("–ú–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    try:
        await context.bot.copy_message(
            chat_id=TARGET_CHAT_ID,
            from_chat_id=msg.chat.id,
            message_id=msg.reply_to_message.message_id,
            **_thread_kwargs()
        )
        await msg.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        await _audit("publish", update, context, "copy_message")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–ø–∏–µ–π: %s", e)
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await _audit("publish_error", update, context, str(e))

async def cmd_reindex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    u = update.effective_user
    if not u or u.id not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    _build_file_index()
    await update.message.reply_text("üîÑ –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω.")
    await _audit("reindex", update, context, "rebuild file index")

# ---------- FAQ / –∫–Ω–æ–ø–∫–∏ / –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ----------
async def howto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    guide = (
        "<b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ 2 —à–∞–≥–∞</b>\n"
        "1) <code>/post | –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è</code>\n"
        "2) –í —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç –ø—Ä–∏—à–ª–∏ Excel/PDF/–∫–∞—Ä—Ç–∏–Ω–∫—É\n\n"
        "–ú–æ–∂–Ω–æ –≤–º–µ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–π —É–∫–∞–∑–∞—Ç—å —Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤ –∏–∑ <code>data/</code>:\n"
        "<code>/post –æ—Ç—á–µ—Ç_–æ–∫—Ç—è–±—Ä—å | –°–≤–æ–¥–∫–∞</code>\n"
        "–¢–µ–∫—Å—Ç –ø–æ–ø–∞–¥—ë—Ç –≤ –ø–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É."
    )
    await update.message.reply_text(guide, parse_mode=ParseMode.HTML)
    await _audit("howto", update, context, "guide shown")

async def crab(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ª–æ–≤–∏ –∫—Ä–∞–±–∞ –æ—Ç –º–æ–µ–π –º–µ–¥–≤–µ–∂—å–µ–π –ª–∞–ø—ã! ü¶Äüêª")
    await _audit("button_hello", update, context, "crab")

async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    USER_CATEGORY[update.effective_chat.id] = None
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=kb_categories())
    await _audit("button_ask", update, context, "open categories")

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    chat_id = update.effective_chat.id
    if USER_CATEGORY.get(chat_id):
        USER_CATEGORY[chat_id] = None
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üëá", reply_markup=kb_categories())
    else:
        USER_FLOW[chat_id] = None
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=kb_main())
    await _audit("button_back", update, context, "back")

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    cat = update.message.text
    if cat not in CATEGORIES:
        return
    USER_CATEGORY[update.effective_chat.id] = cat
    await update.message.reply_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{html.escape(cat)}</b>\n–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å üëá",
        reply_markup=kb_questions(cat),
        parse_mode=ParseMode.HTML
    )
    await _audit("view_category", update, context, f"category={cat}")

async def choose_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    chat_id = update.effective_chat.id
    cat = USER_CATEGORY.get(chat_id)
    if not cat:
        return
    q = update.message.text
    for it in repo.data.get(cat, []):
        if it.question == q:
            await _send_answer_with_files(update, it.render(), it.files)
            await _audit("view_question", update, context, f"category={cat}; question={q}")
            return

async def fuzzy_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    text = (update.message.text or "").strip()
    from difflib import get_close_matches
    if not text:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î", reply_markup=kb_main())
        return
    chat_id = update.effective_chat.id
    current_cat = USER_CATEGORY.get(chat_id)
    if current_cat:
        options = [it.question for it in repo.data.get(current_cat, [])]
        match = get_close_matches(text, options, n=1, cutoff=0.5)
        if match:
            q = match[0]
            for it in repo.data[current_cat]:
                if it.question == q:
                    await _send_answer_with_files(update, f"üîé –ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ:\n<b>{q}</b>\n\n{it.render()}", it.files)
                    await _audit("search_in_category", update, context, f"cat={current_cat}; query={text}; hit={q}")
                    return
        await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ü§î", reply_markup=kb_questions(current_cat))
        await _audit("search_in_category_nohit", update, context, f"cat={current_cat}; query={text}")
    else:
        if not ALL_QUESTIONS:
            await update.message.reply_text("–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å Excel.", reply_markup=kb_main())
            await _audit("search_empty_base", update, context, "no questions")
            return
        options = [q for (_, q) in ALL_QUESTIONS]
        match = get_close_matches(text, options, n=1, cutoff=0.5)
        if match:
            q = match[0]
            for cat, q_text in ALL_QUESTIONS:
                if q_text == q:
                    for it in repo.data.get(cat, []):
                        if it.question == q:
                            await update.message.reply_html(f"üîé –ë–ª–∏–∂–µ –≤—Å–µ–≥–æ:\n<b>{q}</b>\n<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}</i>")
                            await _send_answer_with_files(update, it.render(), it.files)
                            await _audit("search_global", update, context, f"query={text}; hit_cat={cat}; hit_q={q}")
                            return
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ ü§î", reply_markup=kb_categories())
        await _audit("search_global_nohit", update, context, f"query={text}")

# ---------- /post ----------
async def cmd_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    uid = update.effective_user.id if update.effective_user else 0
    if not _is_post_admin(uid):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    raw_all = (update.message.text or update.message.caption or "").strip()
    if raw_all.lower().startswith("/post"):
        after = raw_all.split(" ", 1)[1] if " " in raw_all else ""
    else:
        after = raw_all

    if "|" in after:
        stem_part, desc_part = after.split("|", 1)
        stems = _split_post_stems(stem_part.strip())
        desc = desc_part.strip()
    else:
        stems = []
        desc = after.strip()

    attachments = _collect_attachments_from_message(update)

    if not attachments:
        POST_PENDING[update.effective_chat.id] = {"desc": desc, "stems": stems, "ts": time.time()}
        await update.message.reply_text(
            "–ü—Ä–∏–Ω—è—Ç–æ. –ñ–¥—É —Ñ–∞–π–ª(—ã) Excel/PDF/–∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–¥–æ 3 –º–∏–Ω—É—Ç). "
            "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤ –∏–∑ data/. –ö–∞–∫ –ø—Ä–∏—à–ª—ë—à—å ‚Äî –æ–ø—É–±–ª–∏–∫—É—é."
        )

    await _audit("post_command", update, context, f"desc_len={len(desc)}; stems={','.join(stems) if stems else '-'}")
    await _do_publish(update, context, desc, stems, attachments)

async def _do_publish(update: Update, context: ContextTypes.DEFAULT_TYPE, desc: str, stems: List[str], attachments: List[Dict[str, str]]):
    files_from_data: List[Path] = []
    missing: List[str] = []
    for stem in stems:
        if not _is_safe_stem(stem):
            await update.message.reply_text(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {stem}")
            await _audit("post_error", update, context, f"unsafe_stem={stem}")
            return
        matched = _find_files_by_stem_fast(stem)
        if matched:
            files_from_data.append(matched[0])
        else:
            missing.append(stem)
    if missing:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: " + ", ".join(missing))

    try:
        sent_any = False

        if attachments:
            for i, att in enumerate(attachments):
                cap = desc if (i == 0 and desc) else None
                if att["type"] == "document":
                    await context.bot.send_document(
                        chat_id=TARGET_CHAT_ID,
                        document=att["file_id"],
                        caption=cap,
                        parse_mode=ParseMode.HTML if cap else None,
                        **_thread_kwargs()
                    )
                elif att["type"] == "photo":
                    await context.bot.send_photo(
                        chat_id=TARGET_CHAT_ID,
                        photo=att["file_id"],
                        caption=cap,
                        parse_mode=ParseMode.HTML if cap else None,
                        **_thread_kwargs()
                    )
            sent_any = True

        if files_from_data:
            if not sent_any and desc:
                first, *rest = files_from_data
                with open(first, "rb") as f:
                    await context.bot.send_document(
                        chat_id=TARGET_CHAT_ID,
                        document=f,
                        filename=first.name,
                        caption=desc,
                        parse_mode=ParseMode.HTML,
                        **_thread_kwargs()
                    )
                for p in rest:
                    with open(p, "rb") as f:
                        await context.bot.send_document(chat_id=TARGET_CHAT_ID, document=f, filename=p.name, **_thread_kwargs())
            else:
                for p in files_from_data:
                    with open(p, "rb") as f:
                        await context.bot.send_document(chat_id=TARGET_CHAT_ID, document=f, filename=p.name, **_thread_kwargs())
            sent_any = True

        if not sent_any:
            if desc:
                await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=desc, parse_mode=ParseMode.HTML, **_thread_kwargs())
                sent_any = True
            else:
                await update.message.reply_text(
                    "–ù–µ—á–µ–≥–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: –Ω–∏ –≤–ª–æ–∂–µ–Ω–∏–π, –Ω–∏ —Å—Ç–µ–º–æ–≤, –Ω–∏ –æ–ø–∏—Å–∞–Ω–∏—è.\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post <—Å—Ç–µ–º[,—Å—Ç–µ–º2]> | <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª(—ã)."
                )
                await _audit("post_error", update, context, "nothing to publish")
                return

        await update.message.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        await _audit("post_published", update, context, f"desc_len={len(desc)}; att={len(attachments)}; files={len(files_from_data)}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s", e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await _audit("post_error", update, context, str(e))

async def capture_post_attachments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    chat_id = update.effective_chat.id
    pending = POST_PENDING.get(chat_id)
    if not pending:
        return
    if time.time() - float(pending.get("ts", 0)) > MAX_POST_WAIT_SEC:
        POST_PENDING.pop(chat_id, None)
        return

    atts = _collect_attachments_from_message(update)
    if not atts:
        return

    desc = str(pending.get("desc") or "")
    stems = list(pending.get("stems") or [])
    POST_PENDING.pop(chat_id, None)

    await _audit("post_attachments", update, context, f"count={len(atts)}; desc_len={len(desc)}")
    await _do_publish(update, context, desc, stems, atts)

# ---------- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ----------
async def suggest_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    chat_id = update.effective_chat.id
    USER_FLOW[chat_id] = "suggest"
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫–∏/–æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è –≤—Å—ë –ø–µ—Ä–µ–∫–∏–Ω—É –∞–¥–º–∏–Ω—É. ‚úçÔ∏è",
        reply_markup=ReplyKeyboardMarkup([[BTN_BACK]], resize_keyboard=True)
    )
    await _audit("suggest_start", update, context, "start")

async def suggest_capture(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    chat_id = update.effective_chat.id
    if USER_FLOW.get(chat_id) != "suggest":
        return
    text = (update.message.text or "").strip()

    uid = update.effective_user.id if update.effective_user else 0
    if not _rate_limit_suggest(uid):
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ üôè")
        await _audit("suggest_ratelimit", update, context, "too many")
        return

    if text in {BTN_HELLO, BTN_ASK, BTN_SUGG, BTN_HOWTO}:
        return
    if not text or text == BTN_BACK:
        USER_FLOW[chat_id] = None
        await update.message.reply_text("–û—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é üëá", reply_markup=kb_main())
        await _audit("suggest_cancel", update, context, "cancel")
        return

    user = update.effective_user
    username = f"@{user.username}" if (user and user.username) else (user.full_name if user else "user")
    _append_suggestion(chat_id, user.id if user else 0, user.username if user else "", text)
    await _notify_about_suggestion(context, text, username)
    USER_FLOW[chat_id] = None
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! üöÄ –¢–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é üëá", reply_markup=kb_main())
    await _audit("suggest_sent", update, context, f"len={len(text)}")

# --- –•—É–∫ —Å—Ç–∞—Ä—Ç–∞ ---
async def _on_start(app: Application):
    _build_file_index()
    _load_target_chat()
    _load_target_thread()
    await app.bot.delete_webhook(drop_pending_updates=True)
    me = await app.bot.get_me()
    logger.info("Bot started as @%s (id=%s), target=%s, thread=%s", me.username, me.id, TARGET_CHAT_ID, TARGET_THREAD_ID)

# ---------- –†–æ—É—Ç–∏–Ω–≥ ----------
def build_app() -> Application:
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(_on_start).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("getchat", getchat), group=0)
    app.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("help", help_cmd, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("listfiles", listfiles, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("myid", myid), group=0)  # –º–æ–∂–Ω–æ –∏ –≤ –≥—Ä—É–ø–ø–µ
    app.add_handler(CommandHandler("post", cmd_post, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("send", send_text, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("publish", publish_reply, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("reindex", cmd_reindex, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("settarget", settarget, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("settopic", settopic, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("bindhere", bindhere), group=0)  # –≤—ã–∑—ã–≤–∞—Ç—å –≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã
    app.add_handler(CommandHandler("deleteme", deleteme), group=0)  # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ

    # –ö–Ω–æ–ø–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(r"^üêª (–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è|–õ–æ–≤–∏ –∫—Ä–∞–±–∞)$"),
        crab
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_ASK)}$"),
        ask_category
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_SUGG)}$"),
        suggest_start
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_HOWTO)}$"),
        howto
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_BACK)}$"),
        go_back
    ), group=1)

    # –í–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ /post ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & (filters.Document.ALL | filters.PHOTO) & ~filters.COMMAND,
        capture_post_attachments
    ), group=1)

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
        suggest_capture
    ), group=2)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏/–≤–æ–ø—Ä–æ—Å—ã/fuzzy ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    if CATEGORIES:
        pattern = r"^(" + "|".join(map(re.escape, CATEGORIES)) + r")$"
        app.add_handler(MessageHandler(
            filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(pattern),
            choose_category
        ), group=3)

    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
        choose_question,
        block=False
    ), group=4)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
        fuzzy_search
    ), group=4)

    return app

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
if __name__ == "__main__":
    print(f"[DEBUG] BASE_DIR: {BASE_DIR}")
    print(f"[DEBUG] XLSX_PATH: {XLSX_PATH} (exists={XLSX_PATH.exists()})")
    app = build_app()
    print("Bot is starting‚Ä¶")

    # NEW: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω BASE_URL ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º webhook (–¥–ª—è Render/Glitch/Koyeb).
    BASE_URL = os.getenv("BASE_URL", "").rstrip("/")
    port = int(os.getenv("PORT", "8000"))

    if BASE_URL:
        webhook_path = f"/{BOT_TOKEN}"
        full_url = f"{BASE_URL}{webhook_path}"
        print(f"[DEBUG] Using WEBHOOK at {full_url} (port={port})")
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,       # —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —á–∞—Å—Ç—å URL (–Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
            webhook_url=full_url,      # –ø–æ–ª–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL https://<host>/<BOT_TOKEN>
            drop_pending_updates=True,
            allowed_updates=["message"],
            stop_signals=None,
        )
    else:
        print("[DEBUG] Using POLLING mode")
        app.run_polling(
            close_loop=False,
            drop_pending_updates=True,
            allowed_updates=["message"],
            stop_signals=None,
        )