#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Botv2.py ‚Äî Telegram-–±–æ—Ç (python-telegram-bot v20+)

–§—É–Ω–∫—Ü–∏–∏:
- FAQ –∏–∑ Excel (data/faq.xlsx): –∫–∞–∂–¥–∞—è –≤–∫–ª–∞–¥–∫–∞ = –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã –ø–∞—Ä—Å—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
- –û—Å–æ–±—ã–µ –≤–∫–ª–∞–¥–∫–∏: "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–°–î–ü)", "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤" ‚Äî A(–í–æ–ø—Ä–æ—Å), B(–û—Ç–≤–µ—Ç1), C(–û—Ç–≤–µ—Ç2), D(–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π).
- –ö–æ–ª–æ–Ω–∫–∞ "–§–∞–π–ª" (–∏–ª–∏ File/Files) –≤ Excel: –∏–º–µ–Ω–∞/—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ data/ ‚Äî –±–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç –∏—Ö –∫ –æ—Ç–≤–µ—Ç—É.
- –ö–Ω–æ–ø–∫–∏: üêª –õ–æ–≤–∏ –∫—Ä–∞–±–∞, ‚ùì –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, üí° –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...
- –í–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º.
- –ö–æ–º–∞–Ω–¥–∞ /post ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É (–≤ —Ç.—á. –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤).

–¢—Ä–µ–±—É–µ—Ç—Å—è: python-telegram-bot>=20, pandas, openpyxl, python-dotenv
"""

import os
import re
import logging
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple
from pathlib import Path

import pandas as pd
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, Application, ContextTypes,
    CommandHandler, MessageHandler, filters
)

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env!")

BASE_DIR = Path(__file__).resolve().parent
DATA_DIR = BASE_DIR / "data"
XLSX_PATH = Path(os.getenv("FAQ_XLSX_PATH") or (DATA_DIR / "faq.xlsx"))

# –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É:
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "-1001234567890" –∏–ª–∏ "@channelusername"
POST_ADMINS = {int(x) for x in (os.getenv("POST_ADMINS") or "").replace(" ", "").split(",") if x}

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è):
SUGGEST_CHAT_ID = os.getenv("SUGGEST_CHAT_ID")  # –º–æ–∂–Ω–æ –ø—É—Å—Ç–æ ‚Äî —Ç–æ–≥–¥–∞ —à–ª—ë–º –∞–¥–º–∏–Ω–∞–º
SUGGEST_ADMINS = {int(x) for x in (os.getenv("SUGGEST_ADMINS") or "").replace(" ", "").split(",") if x} or POST_ADMINS

# –§–∞–π–ª —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–ª–æ–≥):
SUGGESTIONS_CSV = DATA_DIR / "suggestions.csv"

# –í–∫–ª–∞–¥–∫–∏, –≥–¥–µ –±–µ—Ä—ë–º —Å—Ç—Ä–æ–≥–æ A(–≤–æ–ø—Ä–æ—Å), B(–û—Ç–≤–µ—Ç1), C(–û—Ç–≤–µ—Ç2), D(–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
SPECIAL_BCD_SHEETS = {
    "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–°–î–ü)",
    "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤",
}

# –õ–æ–≥–∏ –Ω–∞ INFO (–±—ã—Å—Ç—Ä–µ–µ, —á–µ–º DEBUG)
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
logger = logging.getLogger("FAQBot")

# ---------- –ú–æ–¥–µ–ª—å ----------
@dataclass
class FAQItem:
    question: str
    answer: Optional[str] = None
    answer_1: Optional[str] = None
    answer_2: Optional[str] = None
    comment: Optional[str] = None
    files: Optional[List[str]] = None  # —Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–§–∞–π–ª"

    def render(self) -> str:
        parts: List[str] = []
        if self.answer_1:
            parts.append(f"<b>–û—Ç–≤–µ—Ç 1:</b> {self.answer_1}")
        if self.answer_2:
            parts.append(f"<b>–û—Ç–≤–µ—Ç 2:</b> {self.answer_2}")
        if self.comment:
            parts.append(f"<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</i> {self.comment}")
        if self.answer and not parts:
            parts.append(self.answer)
        if not parts:
            parts.append("–û—Ç–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return "\n\n".join(parts)

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def _norm(s: str) -> str:
    return (s or "").strip()

def _pick_one_column(cols: List[str], keywords: List[str]) -> Optional[str]:
    low = [c.lower() for c in cols]
    for kw in keywords:
        kw = kw.lower()
        for i, name in enumerate(low):
            if kw in name:
                return cols[i]
    return None

def _pick_many_columns(cols: List[str], keywords: List[str], exclude: Optional[str] = None) -> List[str]:
    found = []
    for col in cols:
        if exclude and col == exclude:
            continue
        name = col.lower()
        if any(kw.lower() in name for kw in keywords):
            found.append(col)
    return found

def _split_files_cell(val: str) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ '–§–∞–π–ª' –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–º–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ , ; –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)."""
    if not val:
        return []
    raw = re.split(r"[,\n;]+", val)
    return [s.strip() for s in raw if s.strip()]

def _split_post_stems(val: str) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–º–æ–≤ –≤ /post: –∑–∞–ø—è—Ç–∞—è, ;, –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏."""
    if not val:
        return []
    raw = re.split(r"[,\n;]+", val)
    return [s.strip() for s in raw if s.strip()]

# --- –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–∏—Å–∫–æ–≤ ---
FILE_INDEX: Dict[str, Path] = {}

def _build_file_index():
    """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ data/: –∫–ª—é—á–∏ ‚Äî stem –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è (lower)."""
    FILE_INDEX.clear()
    if DATA_DIR.exists():
        for p in DATA_DIR.iterdir():
            if p.is_file():
                FILE_INDEX[p.stem.lower()] = p
                FILE_INDEX[p.name.lower()] = p

def _find_files_by_stem_fast(stem: str) -> List[Path]:
    """–°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∑–∞—Ç–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫."""
    s = (stem or "").lower().strip()
    if not s:
        return []
    out: List[Path] = []
    if s in FILE_INDEX:
        out.append(FILE_INDEX[s])
        return out
    for key, path in FILE_INDEX.items():
        if key.startswith(s):
            out.append(path)
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    uniq = []
    for p in out:
        if p not in seen:
            uniq.append(p); seen.add(p)
    return uniq

def _is_post_admin(user_id: int) -> bool:
    return user_id in POST_ADMINS

def _ensure_data_dir():
    DATA_DIR.mkdir(parents=True, exist_ok=True)

def _append_suggestion(chat_id: int, user_id: int, username: Optional[str], text: str):
    """–ü–∏—à–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ CSV."""
    import csv, datetime
    _ensure_data_dir()
    is_new = not SUGGESTIONS_CSV.exists()
    with open(SUGGESTIONS_CSV, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f, delimiter=";")
        if is_new:
            w.writerow(["timestamp", "chat_id", "user_id", "username", "suggestion"])
        w.writerow([datetime.datetime.now().isoformat(timespec="seconds"), chat_id, user_id, username or "", text])

async def _notify_about_suggestion(context: ContextTypes.DEFAULT_TYPE, text: str, from_user: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö (–≤ –æ–±—â–∏–π —á–∞—Ç –∏–ª–∏ –ª–∏—á–∫–∏ –∞–¥–º–∏–Ω–∞–º)."""
    msg = f"üÜï <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n–û—Ç: {from_user}\n\n{text}"
    if SUGGEST_CHAT_ID:
        await context.bot.send_message(chat_id=SUGGEST_CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
    else:
        for uid in SUGGEST_ADMINS:
            try:
                await context.bot.send_message(chat_id=uid, text=msg, parse_mode=ParseMode.HTML)
            except Exception:
                logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É %s", uid)

async def _send_answer_with_files(update: Update, html_text: str, files: Optional[List[str]]):
    """–°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º ‚Äî –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ —Å–ø–∏—Å–∫—É —Å—Ç–µ–º–æ–≤."""
    await update.message.reply_html(html_text)
    if not files:
        return
    for stem in files:
        paths = _find_files_by_stem_fast(stem)
        if not paths:
            logging.warning("–§–∞–π–ª –ø–æ —Å—Ç–µ–º—É '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ %s", stem, DATA_DIR)
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {stem}")
            continue
        file_path = paths[0]
        try:
            with open(file_path, "rb") as fh:
                await update.message.reply_document(document=fh, filename=file_path.name, caption=f"üìé {file_path.name}")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ %s: %s", file_path, e)
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {file_path.name}")

async def post_to_group(context: ContextTypes.DEFAULT_TYPE, text: str, files: Optional[List[Path]] = None):
    """–ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É TARGET_CHAT_ID: —Ç–µ–∫—Å—Ç + (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤."""
    if not TARGET_CHAT_ID:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TARGET_CHAT_ID –≤ .env")
    if files:
        first, *rest = files
        with open(first, "rb") as f:
            await context.bot.send_document(
                chat_id=TARGET_CHAT_ID, document=f, filename=first.name,
                caption=text, parse_mode=ParseMode.HTML
            )
        for p in rest:
            with open(p, "rb") as f:
                await context.bot.send_document(chat_id=TARGET_CHAT_ID, document=f, filename=p.name)
    else:
        await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=text, parse_mode=ParseMode.HTML)

# ---------- –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ----------
class FAQRepository:
    """–ß–∏—Ç–∞–µ—Ç Excel –∏ —Å—Ç—Ä–æ–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: [FAQItem, ...]}"""

    def __init__(self, xlsx_path: Path):
        self.xlsx_path = xlsx_path
        self.data: Dict[str, List[FAQItem]] = {}

    def load(self) -> None:
        if not self.xlsx_path.exists():
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {self.xlsx_path}")

        book: Dict[str, pd.DataFrame] = pd.read_excel(
            self.xlsx_path, sheet_name=None, dtype=str, engine="openpyxl"
        )
        normalized: Dict[str, List[FAQItem]] = {}

        for sheet, df in book.items():
            if df is None or df.empty:
                continue
            df = df.fillna("")
            # —É–±—Ä–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df[~(df.apply(lambda r: all((str(x).strip() == "" for x in r)), axis=1))].reset_index(drop=True)

            if sheet.strip() in SPECIAL_BCD_SHEETS:
                items = self._parse_special_bcd(df)
            else:
                items = self._parse_generic(df)

            items = [it for it in items if it.question and it.question.strip()]
            if items:
                normalized[sheet] = items
                logger.info("–ö–∞—Ç–µ–≥–æ—Ä–∏—è '%s': %d –≤–æ–ø—Ä–æ—Å–æ–≤", sheet, len(items))

        if not normalized:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å FAQ –Ω–∏ —Å –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ Excel.")
        self.data = normalized
        logger.info("FAQ –∑–∞–≥—Ä—É–∂–µ–Ω: %d –≤–∫–ª–∞–¥–æ–∫", len(self.data))

    def _extract_files_from_row(self, df: pd.DataFrame, row: pd.Series) -> List[str]:
        """–ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É '–§–∞–π–ª'/'File'/'Files' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–º–æ–≤ –∏–∑ —è—á–µ–π–∫–∏."""
        file_cols = [c for c in df.columns if ("—Ñ–∞–π–ª" in c.lower()) or ("file" in c.lower())]
        if not file_cols:
            return []
        cell = _norm(str(row[file_cols[0]]))
        if not cell or cell.lower() == "nan":
            return []
        return _split_files_cell(cell)

    def _parse_special_bcd(self, df: pd.DataFrame) -> List[FAQItem]:
        """A=–≤–æ–ø—Ä–æ—Å, B=–û—Ç–≤–µ—Ç1, C=–û—Ç–≤–µ—Ç2, D=–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π; + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ '–§–∞–π–ª'."""
        if df.shape[1] < 4:
            logger.warning("–û—Å–æ–±–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏–º–µ–µ—Ç –º–µ–Ω—å—à–µ 4 –∫–æ–ª–æ–Ω–æ–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")
            return []
        items: List[FAQItem] = []
        for _, row in df.iterrows():
            q  = _norm(str(row.iloc[0]))
            a1 = _norm(str(row.iloc[1])) or None
            a2 = _norm(str(row.iloc[2])) or None
            cm = _norm(str(row.iloc[3])) or None
            if not q:
                continue
            files = self._extract_files_from_row(df, row)
            items.append(FAQItem(question=q, answer_1=a1, answer_2=a2, comment=cm, files=files or None))
        return items

    def _parse_generic(self, df: pd.DataFrame) -> List[FAQItem]:
        """
        –û–±—â–∞—è –ª–æ–≥–∏–∫–∞:
        - –í–æ–ø—Ä–æ—Å: –ø–æ –∫–ª—é—á–∞–º ("–≤–æ–ø—Ä–æ—Å","—Ç–µ–º–∞","–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ","–∑–∞–≥–æ–ª–æ–≤–æ–∫") –∏–ª–∏ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞.
        - –û—Ç–≤–µ—Ç(—ã): –ø–æ –∫–ª—é—á–∞–º ("–æ—Ç–≤–µ—Ç","–æ–ø–∏—Å–∞–Ω–∏–µ","–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","—á—Ç–æ –¥–µ–ª–∞—Ç—å","–∫–∞–∫","–≥–¥–µ","–∫–æ–Ω—Ç–∞–∫—Ç","—Ç–µ–ª–µ—Ñ–æ–Ω",
          "email","–ø–æ—á—Ç–∞","—Å—Å—ã–ª–∫–∞","–∞–¥—Ä–µ—Å","–∫–æ–º–º–µ–Ω—Ç–∞—Ä"). –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî —Å–∫–ª–µ–∏–≤–∞–µ–º –∏—Ö —Å –ø–æ–¥–ø–∏—Å—è–º–∏.
        - –ö–æ–ª–æ–Ω–∫–∞ '–§–∞–π–ª' (–∏–ª–∏ 'File/Files') ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/; –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.
        """
        cols = list(df.columns)
        q_col = _pick_one_column(cols, ["–≤–æ–ø—Ä–æ—Å", "—Ç–µ–º–∞", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∑–∞–≥–æ–ª–æ–≤–æ–∫"]) or cols[0]

        answer_cols = _pick_many_columns(
            cols,
            ["–æ—Ç–≤–µ—Ç", "–æ–ø–∏—Å–∞–Ω–∏–µ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫", "–≥–¥–µ",
             "–∫–æ–Ω—Ç–∞–∫—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "email", "–ø–æ—á—Ç–∞", "—Å—Å—ã–ª–∫–∞", "–∞–¥—Ä–µ—Å", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä"],
            exclude=q_col
        )
        if not answer_cols and len(cols) > 1:
            answer_cols = [cols[1]]

        items: List[FAQItem] = []
        for _, row in df.iterrows():
            q = _norm(str(row[q_col]))
            if not q:
                continue

            # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            parts: List[str] = []
            for c in answer_cols:
                val = _norm(str(row[c]))
                if val and val.lower() != "nan":
                    if len(answer_cols) > 1:
                        parts.append(f"<b>{c}:</b> {val}")
                    else:
                        parts.append(val)
            answer_text = "\n\n".join(parts) if parts else None

            # —Ñ–∞–π–ª—ã
            files = self._extract_files_from_row(df, row)

            if answer_text or files:
                items.append(FAQItem(question=q, answer=answer_text, files=files or None))
        return items

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ----------
repo = FAQRepository(XLSX_PATH)
repo.load()

CATEGORIES: List[str] = list(repo.data.keys())
ALL_QUESTIONS: List[Tuple[str, str]] = [(cat, it.question) for cat, items in repo.data.items() for it in items]
USER_CATEGORY: Dict[int, Optional[str]] = {}
USER_FLOW: Dict[int, str] = {}  # chat_id -> "suggest" | None

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_main() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["üêª –õ–æ–≤–∏ –∫—Ä–∞–±–∞", "‚ùì –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å"],
         ["üí° –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"]],
        resize_keyboard=True
    )

def kb_categories() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[cat] for cat in CATEGORIES] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)

def kb_questions(category: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[it.question] for it in repo.data.get(category, [])] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    USER_CATEGORY[update.effective_chat.id] = None
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>PtoShkinDSU_bot</b> ü§ñ\n–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=kb_main(),
        parse_mode=ParseMode.HTML
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /post. –ò–ª–∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá", reply_markup=kb_main())

async def crab(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ª–æ–≤–∏ –∫—Ä–∞–±–∞ –æ—Ç –º–æ–µ–π –º–µ–¥–≤–µ–∂—å–µ–π –ª–∞–ø—ã! ü¶Äüêª")

async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    USER_CATEGORY[update.effective_chat.id] = None
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=kb_categories())

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if USER_CATEGORY.get(chat_id):
        USER_CATEGORY[chat_id] = None
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üëá", reply_markup=kb_categories())
    else:
        USER_FLOW[chat_id] = None
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=kb_main())

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cat = update.message.text
    if cat not in CATEGORIES:
        return
    USER_CATEGORY[update.effective_chat.id] = cat
    await update.message.reply_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat}</b>\n–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å üëá",
        reply_markup=kb_questions(cat),
        parse_mode=ParseMode.HTML
    )

async def choose_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    cat = USER_CATEGORY.get(chat_id)
    if not cat:
        return
    q = update.message.text
    for it in repo.data.get(cat, []):
        if it.question == q:
            await _send_answer_with_files(update, it.render(), it.files)
            return

# Fuzzy-–ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
async def fuzzy_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î", reply_markup=kb_main())
        return

    from difflib import get_close_matches
    chat_id = update.effective_chat.id
    current_cat = USER_CATEGORY.get(chat_id)

    if current_cat:
        options = [it.question for it in repo.data.get(current_cat, [])]
        match = get_close_matches(text, options, n=1, cutoff=0.5)
        if match:
            q = match[0]
            for it in repo.data[current_cat]:
                if it.question == q:
                    await _send_answer_with_files(update, f"üîé –ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ:\n<b>{q}</b>\n\n{it.render()}", it.files)
                    return
        await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ü§î", reply_markup=kb_questions(current_cat))
    else:
        if not ALL_QUESTIONS:
            await update.message.reply_text("–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å Excel.", reply_markup=kb_main())
            return
        options = [q for (_, q) in ALL_QUESTIONS]
        match = get_close_matches(text, options, n=1, cutoff=0.5)
        if match:
            q = match[0]
            for cat, q_text in ALL_QUESTIONS:
                if q_text == q:
                    for it in repo.data.get(cat, []):
                        if it.question == q:
                            await update.message.reply_html(f"üîé –ë–ª–∏–∂–µ –≤—Å–µ–≥–æ:\n<b>{q}</b>\n<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}</i>")
                            await _send_answer_with_files(update, it.render(), it.files)
                            return
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ ü§î", reply_markup=kb_categories())

# /post ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/; –∏–ª–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
async def cmd_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    /post <—Å—Ç–µ–º[,—Å—Ç–µ–º2,...]> | <–æ–ø–∏—Å–∞–Ω–∏–µ>
    /post | <–æ–ø–∏—Å–∞–Ω–∏–µ>     (–±–µ–∑ —Ñ–∞–π–ª–∞)
    –ü—Ä–∏–º–µ—Ä—ã:
      /post –ì—Ä–∞—Ñ–∏–∫ –î–°–£1 | üìÑ –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—É—Å–∫–æ–≤
      /post –ì—Ä–∞—Ñ–∏–∫ –î–°–£1, –ì—Ä–∞—Ñ–∏–∫ –î–°–£2 | üìé –î–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞
      /post | –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
    """
    if not update.message:
        return
    user_id = update.effective_user.id if update.effective_user else 0
    if not _is_post_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    raw = (update.message.text or "").strip()
    if raw.lower().startswith("/post"):
        raw = raw.split(" ", 1)[1] if " " in raw else ""

    if "|" in raw:
        stem_part, desc_part = raw.split("|", 1)
        stems = _split_post_stems(stem_part.strip())
        desc = desc_part.strip()
    else:
        stems = []
        desc = raw.strip()

    if not desc:
        await update.message.reply_text(
            "–§–æ—Ä–º–∞—Ç: /post <—Å—Ç–µ–º[,—Å—Ç–µ–º2,...]> | <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
            "–∏–ª–∏:    /post | <–æ–ø–∏—Å–∞–Ω–∏–µ>"
        )
        return

    files: List[Path] = []
    missing: List[str] = []
    for stem in stems:
        matched = _find_files_by_stem_fast(stem)
        if matched:
            files.append(matched[0])
        else:
            missing.append(stem)

    if missing:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: " + ", ".join(missing))

    try:
        await post_to_group(context, desc, files if files else None)
        await update.message.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s", e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async def suggest_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    USER_FLOW[chat_id] = "suggest"
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫–∏/–æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è –≤—Å—ë –ø–µ—Ä–µ–∫–∏–Ω—É –∞–¥–º–∏–Ω—É. ‚úçÔ∏è",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    )

async def suggest_capture(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if USER_FLOW.get(chat_id) != "suggest":
        return
    text = (update.message.text or "").strip()
    if not text or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW[chat_id] = None
        await update.message.reply_text("–û—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é üëá", reply_markup=kb_main())
        return

    user = update.effective_user
    username = f"@{user.username}" if (user and user.username) else (user.full_name if user else "user")
    _append_suggestion(chat_id, user.id if user else 0, user.username if user else "", text)
    await _notify_about_suggestion(context, text, username)

    USER_FLOW[chat_id] = None
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! üöÄ –¢–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é üëá", reply_markup=kb_main())

# ---------- –†–æ—É—Ç–∏–Ω–≥ ----------
def build_app() -> Application:
    # post_init –≤—ã–ø–æ–ª–Ω–∏—Ç _on_start –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–Ω–µ—Å—ë—Ç webhook, –∑–∞–ª–æ–≥–∏—Ä—É–µ—Ç –±–æ—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–æ–≤)
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(_on_start).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("post", cmd_post))
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä—É—á–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ñ–∞–π–ª–æ–≤
    app.add_handler(CommandHandler("reindex", cmd_reindex))

    # –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üêª –õ–æ–≤–∏ –∫—Ä–∞–±–∞$"), crab))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^‚ùì –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å$"), ask_category))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üí° –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞$"), suggest_start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), go_back))

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / –≤–æ–ø—Ä–æ—Å—ã
    pattern = r"^(" + "|".join(map(re.escape, CATEGORIES)) + r")$"
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(pattern), choose_category))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, choose_question))

    # –≤–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚Äî –¥–æ fuzzy
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, suggest_capture))

    # fuzzy-–ø–æ–∏—Å–∫ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fuzzy_search))

    return app

# --- –°–ª—É–∂–µ–±–Ω—ã–π —Ö—É–∫ —Å—Ç–∞—Ä—Ç–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
async def _on_start(app: Application):
    try:
        _build_file_index()
        await app.bot.delete_webhook(drop_pending_updates=True)
        me = await app.bot.get_me()
        logger.info("Bot started as @%s (id=%s)", me.username, me.id)
    except Exception as e:
        logger.exception("Startup failed: %s", e)

# (–æ–ø—Ü.) –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞
async def cmd_reindex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    if not u or u.id not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    _build_file_index()
    await update.message.reply_text("üîÑ –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω.")

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
if __name__ == "__main__":
    print(f"[DEBUG] BASE_DIR: {BASE_DIR}")
    print(f"[DEBUG] XLSX_PATH: {XLSX_PATH} (exists={XLSX_PATH.exists()})")
    app = build_app()
    print("Bot is running‚Ä¶")
    app.run_polling(
        close_loop=False,
        drop_pending_updates=True,
        allowed_updates=["message"],  # –º–µ–Ω—å—à–µ –ª–∏—à–Ω–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤
        stop_signals=None,
    )
