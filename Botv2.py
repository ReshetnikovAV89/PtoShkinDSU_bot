# -*- coding: utf-8 -*-
"""
PtoShkinDSU_bot ‚Äî Telegram-–±–æ—Ç (python-telegram-bot v20+), –≥–æ—Ç–æ–≤—ã–π –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Koyeb.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- FAQ –∏–∑ Excel (data/faq.xlsx), –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ¬´–æ—Å–æ–±—ã—Ö¬ª –≤–∫–ª–∞–¥–æ–∫ (–ø—Ä–∏–º–µ—Ä: –°–î–ü, –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ü–õ).
- –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: /post (—Å –ø–æ–¥–ø–∏—Å—å—é –∏ ¬´–æ–∂–∏–¥–∞–Ω–∏–µ–º¬ª –≤–ª–æ–∂–µ–Ω–∏–π –¥–æ 3 –º–∏–Ω—É—Ç), /send, /publish (–∫–æ–ø–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è).
- –ü—Ä–∏–≤—è–∑–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞/—Ç–µ–º—ã (TARGET_CHAT_ID/TARGET_THREAD_ID) –∏ –∫–æ–º–∞–Ω–¥—ã /settarget, /settopic, /bindhere.
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∞) —Å –ª–æ–≥–æ–º –≤ CSV –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞–º –∏–ª–∏ –≤ SUGGEST_CHAT_ID.
- –ê—É–¥–∏—Ç –≤ data/audit.csv (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ AUDIT_CHAT_ID).
- –ß–∏—Å—Ç–∫–∏: /deleteme, /cleanlast, /cleanhere, /cleanchat, /purgehere.
- Webhook –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ BASE_URL, –∏–Ω–∞—á–µ polling‚Äî–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º):
- BOT_TOKEN (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- BASE_URL ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞ (https://<app>.koyeb.app), –≤–∫–ª—é—á–∞–µ—Ç webhook-—Ä–µ–∂–∏–º; –±–µ–∑ –Ω–µ–≥–æ ‚Äî polling
- PORT ‚Äî –∑–∞–¥–∞—ë—Ç Koyeb –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–¥ –µ–≥–æ –±–µ—Ä—ë—Ç (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
- (–æ–ø—Ü.) WEBHOOK_SECRET ‚Äî —Å–µ–∫—Ä–µ—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö POST –æ—Ç Telegram
- (–æ–ø—Ü.) FAQ_XLSX_PATH ‚Äî –ø—É—Ç—å –¥–æ xlsx (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é data/faq.xlsx)
- (–æ–ø—Ü.) TARGET_CHAT_ID, SUGGEST_CHAT_ID, POST_ADMINS, SUGGEST_ADMINS, AUDIT_CHAT_ID
"""

import os
import re
import time
import html
import logging
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple
from pathlib import Path
from collections import deque
import datetime
from enum import Enum

import pandas as pd
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, Application, ContextTypes,
    CommandHandler, MessageHandler, filters
)

# ---------- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
def now_utc() -> datetime.datetime:
    return datetime.datetime.now(datetime.timezone.utc)

MAX_DELETE_AGE_SEC = 48 * 3600       # –ª–∏–º–∏—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ¬´—á—É–∂–∏—Ö¬ª —Å–æ–æ–±—â–µ–Ω–∏–π
MAX_POST_WAIT_SEC = 180              # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ /post (—Å–µ–∫)
RECENT_MAX = 1000                    # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏—Ç—å –≤ –±—É—Ñ–µ—Ä–µ –Ω–∞ —á–∞—Ç/—Ç–µ–º—É

# ---------- –ö–æ–Ω—Ñ–∏–≥ / –æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env!")

BASE_DIR = Path(__file__).resolve().parent
DATA_DIR = BASE_DIR / "data"
XLSX_PATH = Path(os.getenv("FAQ_XLSX_PATH") or (DATA_DIR / "faq.xlsx"))

TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")  # "-100..." –∏–ª–∏ "@channelusername"
TARGET_CHAT_FILE = DATA_DIR / "target_chat.txt"

TARGET_THREAD_ID: Optional[int] = None
TARGET_THREAD_FILE = DATA_DIR / "target_thread.txt"

POST_ADMINS = {int(x) for x in (os.getenv("POST_ADMINS") or "").replace(" ", "").split(",") if x}

SUGGEST_CHAT_ID = os.getenv("SUGGEST_CHAT_ID")
SUGGEST_ADMINS = {int(x) for x in (os.getenv("SUGGEST_ADMINS") or "").replace(" ", "").split(",") if x} or POST_ADMINS

AUDIT_CHAT_ID = os.getenv("AUDIT_CHAT_ID")
AUDIT_CSV = DATA_DIR / "audit.csv"
SUGGESTIONS_CSV = DATA_DIR / "suggestions.csv"

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞)
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "") or None

# –ü—Ä–∏–º–µ—Ä ¬´–æ—Å–æ–±—ã—Ö¬ª –≤–∫–ª–∞–¥–æ–∫ (–µ—Å–ª–∏ —Ç–≤–æ–π Excel –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —ç—Ç–∏—Ö –ª–∏—Å—Ç–∞—Ö)
SPECIAL_BCD_SHEETS = {"–î–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–°–î–ü)", "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤"}

logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
logger = logging.getLogger("FAQBot")

# ---------- –ö–Ω–æ–ø–æ—á–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
BTN_HELLO = "üêª –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"
BTN_ASK   = "‚ùì –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å"
BTN_SUGG  = "üí° –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"
BTN_HOWTO = "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"
BTN_BACK  = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

MAIN_KB = ReplyKeyboardMarkup([[BTN_HELLO, BTN_ASK],[BTN_SUGG],[BTN_HOWTO]], resize_keyboard=True)

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å / –ª–∏–º–∏—Ç—ã ----------
STEM_SAFE = re.compile(r"^[\w\-\s\.]+$", re.IGNORECASE)

class Flow(Enum):
    NONE = "none"
    AWAIT_SUGGEST = "await_suggest"

RATE_LIMIT = {"suggest_per_min": 2}
_last_suggest_at: Dict[int, deque] = {}  # uid -> deque[timestamps]

def _ensure_data_dir():
    DATA_DIR.mkdir(parents=True, exist_ok=True)

def _is_safe_stem(s: str) -> bool:
    return bool(STEM_SAFE.match(s or ""))

def _rate_limit_suggest(user_id: int) -> bool:
    dq = _last_suggest_at.setdefault(user_id, deque(maxlen=RATE_LIMIT["suggest_per_min"]))
    now = time.time()
    if dq and len(dq) == dq.maxlen and now - dq[0] < 60:
        return False
    dq.append(now)
    return True

def _sanitize_for_csv(s: str) -> str:
    if not s:
        return ""
    s = s.replace("\r", " ").replace("\n", " ").strip()
    return "'" + s if s[:1] in ("=", "+", "-", "@") else s

def _is_private(update: Update) -> bool:
    return update.effective_chat and update.effective_chat.type == "private"

def _is_post_admin(user_id: int) -> bool:
    return user_id in POST_ADMINS

def _load_target_chat():
    global TARGET_CHAT_ID
    try:
        if TARGET_CHAT_FILE.exists():
            val = TARGET_CHAT_FILE.read_text(encoding="utf-8").strip()
            if val:
                TARGET_CHAT_ID = val
                logger.info("[CONFIG] –ó–∞–≥—Ä—É–∂–µ–Ω TARGET_CHAT_ID –∏–∑ —Ñ–∞–π–ª–∞: %s", val)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å target_chat.txt")

def _save_target_chat(chat_id: str):
    try:
        _ensure_data_dir()
        TARGET_CHAT_FILE.write_text(chat_id, encoding="utf-8")
        logger.info("[CONFIG] –°–æ—Ö—Ä–∞–Ω—ë–Ω TARGET_CHAT_ID: %s", chat_id)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å target_chat.txt")

def _load_target_thread():
    global TARGET_THREAD_ID
    try:
        if TARGET_THREAD_FILE.exists():
            val = TARGET_THREAD_FILE.read_text(encoding="utf-8").strip()
            if val:
                TARGET_THREAD_ID = int(val)
                logger.info("[CONFIG] –ó–∞–≥—Ä—É–∂–µ–Ω TARGET_THREAD_ID –∏–∑ —Ñ–∞–π–ª–∞: %s", val)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å target_thread.txt")

def _save_target_thread(thread_id: Optional[int]):
    try:
        _ensure_data_dir()
        if thread_id is None:
            TARGET_THREAD_FILE.unlink(missing_ok=True)
            logger.info("[CONFIG] –°–±—Ä–æ—à–µ–Ω TARGET_THREAD_ID")
        else:
            TARGET_THREAD_FILE.write_text(str(thread_id), encoding="utf-8")
            logger.info("[CONFIG] –°–æ—Ö—Ä–∞–Ω—ë–Ω TARGET_THREAD_ID: %s", thread_id)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å target_thread.txt")

def _thread_kwargs():
    return {"message_thread_id": TARGET_THREAD_ID} if TARGET_THREAD_ID else {}

# ---------- –ê—É–¥–∏—Ç ----------
def _fmt_user(update: Optional[Update]) -> Tuple[str, str]:
    if not update or not update.effective_user:
        return "", ""
    uid = str(update.effective_user.id)
    uname = f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.full_name
    return uid, uname

def _audit_row(event: str, update: Optional[Update], details: str = "") -> List[str]:
    ts = datetime.datetime.now().isoformat(timespec="seconds")
    uid, uname = _fmt_user(update)
    chat_id = str(update.effective_chat.id) if (update and update.effective_chat) else ""
    chat_type = update.effective_chat.type if (update and update.effective_chat) else ""
    return [ts, uid, uname, chat_id, chat_type, event, details]

def _audit_to_csv(row: List[str]):
    import csv
    _ensure_data_dir()
    new = not AUDIT_CSV.exists()
    with open(AUDIT_CSV, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f, delimiter=";")
        if new:
            w.writerow(["timestamp", "user_id", "username", "chat_id", "chat_type", "event", "details"])
        row[2] = _sanitize_for_csv(row[2])
        row[6] = _sanitize_for_csv(row[6])
        w.writerow(row)

async def _audit_notify(context: ContextTypes.DEFAULT_TYPE, row: List[str]):
    if not AUDIT_CHAT_ID:
        return
    ts, uid, uname, chat_id, chat_type, event, details = row
    try:
        msg = (
            f"üìù <b>–ê—É–¥–∏—Ç</b>\n"
            f"–°–æ–±—ã—Ç–∏–µ: <b>{html.escape(event)}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{uid}</code> {html.escape(uname)}\n"
            f"–ß–∞—Ç: <code>{chat_id}</code> ({chat_type})\n"
            f"–î–µ—Ç–∞–ª–∏: {html.escape(details) if details else '‚Äî'}\n"
            f"–í—Ä–µ–º—è: {ts}"
        )
        await context.bot.send_message(chat_id=AUDIT_CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

async def _audit(event: str, update: Optional[Update], context: Optional[ContextTypes.DEFAULT_TYPE], details: str = ""):
    row = _audit_row(event, update, details)
    _audit_to_csv(row)
    if context:
        await _audit_notify(context, row)

# ---------- –ú–æ–¥–µ–ª—å ----------
@dataclass
class FAQItem:
    question: str
    answer: Optional[str] = None
    answer_1: Optional[str] = None
    answer_2: Optional[str] = None
    comment: Optional[str] = None
    files: Optional[List[str]] = None

    def render(self) -> str:
        parts: List[str] = []
        if self.answer_1:
            parts.append(f"<b>–û—Ç–≤–µ—Ç 1:</b> {self.answer_1}")
        if self.answer_2:
            parts.append(f"<b>–û—Ç–≤–µ—Ç 2:</b> {self.answer_2}")
        if self.comment:
            parts.append(f"<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</i> {self.comment}")
        if self.answer and not parts:
            parts.append(self.answer)
        if not parts:
            parts.append("–û—Ç–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return "\n\n".join(parts)

# ---------- –£—Ç–∏–ª–∏—Ç—ã Excel/FAQ ----------
def _norm(s: str) -> str:
    return (s or "").strip()

def _pick_one_column(cols: List[str], keywords: List[str]) -> Optional[str]:
    cols_low = [c.lower() for c in cols]
    for kw in keywords:
        kw = kw.lower()
        for i, name in enumerate(cols_low):
            if kw in name:
                return cols[i]
    return None

def _pick_many_columns(cols: List[str], keywords: List[str], exclude: Optional[str] = None) -> List[str]:
    excl = exclude or ""
    out: List[str] = []
    kws = tuple(k.lower() for k in keywords)
    for c in cols:
        if c == excl:
            continue
        name = c.lower()
        if any(k in name for k in kws):
            out.append(c)
    return out

def _split_files_cell(val: str) -> List[str]:
    if not val:
        return []
    raw = re.split(r"[,\n;]+", val)
    return [s.strip() for s in raw if s and s.strip()]

def _split_post_stems(val: str) -> List[str]:
    if not val:
        return []
    raw = re.split(r"[,\n;]+", val)
    return [s.strip() for s in raw if s and s.strip()]

FILE_INDEX: Dict[str, Path] = {}

def _build_file_index():
    FILE_INDEX.clear()
    if DATA_DIR.exists():
        for p in DATA_DIR.iterdir():
            if p.is_file():
                FILE_INDEX[p.stem.lower()] = p
                FILE_INDEX[p.name.lower()] = p

def _find_files_by_stem_fast(stem: str) -> List[Path]:
    s = (stem or "").lower().strip()
    if not s:
        return []
    if s in FILE_INDEX:
        return [FILE_INDEX[s]]
    out = [path for key, path in FILE_INDEX.items() if key.startswith(s)]
    seen, uniq = set(), []
    for p in out:
        if p not in seen:
            uniq.append(p); seen.add(p)
    return uniq

def _append_suggestion(chat_id: int, user_id: int, username: Optional[str], text: str):
    import csv
    _ensure_data_dir()
    is_new = not SUGGESTIONS_CSV.exists()
    with open(SUGGESTIONS_CSV, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f, delimiter=";")
        if is_new:
            w.writerow(["timestamp", "chat_id", "user_id", "username", "suggestion"])
        safe = _sanitize_for_csv(text)
        w.writerow([datetime.datetime.now().isoformat(timespec="seconds"), chat_id, user_id, username or "", safe])

# ---------- –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ ----------
LAST_BOT_MSG: Dict[Tuple[str, int], int] = {}

def _key(chat_id: Optional[int | str], thread_id: Optional[int]) -> Tuple[str, int]:
    return (str(chat_id), int(thread_id) if thread_id else 0)

def _set_last(chat_id: Optional[int | str], thread_id: Optional[int], message_id: int):
    LAST_BOT_MSG[_key(chat_id, thread_id)] = int(message_id)

def _last_target_key() -> Tuple[str, int]:
    return _key(TARGET_CHAT_ID, TARGET_THREAD_ID)

def _find_last_any_thread_for_target() -> Optional[Tuple[Tuple[str, int], int]]:
    items = [(k, v) for k, v in LAST_BOT_MSG.items() if k[0] == str(TARGET_CHAT_ID)]
    if not items:
        return None
    return max(items, key=lambda kv: kv[1])

# --------- –û–±—ë—Ä—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ TARGET (—Ç—Ä–µ–∫–∞—é—Ç last) ----------
async def _send_target_message(context: ContextTypes.DEFAULT_TYPE, text: str, **kwargs):
    m = await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=text, **{**_thread_kwargs(), **kwargs})
    _set_last(TARGET_CHAT_ID, TARGET_THREAD_ID, m.message_id)
    return m

async def _send_target_document(context: ContextTypes.DEFAULT_TYPE, document, **kwargs):
    m = await context.bot.send_document(chat_id=TARGET_CHAT_ID, document=document, **{**_thread_kwargs(), **kwargs})
    _set_last(TARGET_CHAT_ID, TARGET_THREAD_ID, m.message_id)
    return m

async def _send_target_photo(context: ContextTypes.DEFAULT_TYPE, photo, **kwargs):
    m = await context.bot.send_photo(chat_id=TARGET_CHAT_ID, photo=photo, **{**_thread_kwargs(), **kwargs})
    _set_last(TARGET_CHAT_ID, TARGET_THREAD_ID, m.message_id)
    return m

# ---------- –ë—É—Ñ–µ—Ä –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è /cleanchat –∏ /purgehere) ----------
RECENT_MSGS: Dict[Tuple[str, int], deque] = {}  # –∫–ª—é—á=(chat_id, thread_id_or_0) -> deque(dict)

def _recent_key(chat_id: int | str, thread_id: Optional[int]) -> Tuple[str, int]:
    return (str(chat_id), int(thread_id) if thread_id else 0)

def _recent_deque(chat_id: int | str, thread_id: Optional[int]) -> deque:
    key = _recent_key(chat_id, thread_id)
    dq = RECENT_MSGS.get(key)
    if dq is None:
        dq = deque(maxlen=RECENT_MAX)
        RECENT_MSGS[key] = dq
    return dq

async def track_recent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≤–∏–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö/—Ç–µ–º–∞—Ö, —á—Ç–æ–±—ã —á–∏—Å—Ç–∫–∏ –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –±—É—Ñ–µ—Ä—É."""
    chat = update.effective_chat
    msg = update.message
    if not msg or chat.type not in ("group", "supergroup"):
        return
    dq = _recent_deque(chat.id, msg.message_thread_id)
    mdate = msg.date
    if mdate and mdate.tzinfo is None:
        mdate = mdate.replace(tzinfo=datetime.timezone.utc)
    dq.append({
        "message_id": msg.message_id,
        "from_user_id": msg.from_user.id if msg.from_user else None,
        "date": mdate,
    })

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–∫—ç—à –±–æ—Ç–∞ ----------
BOT_INFO = {"id": None, "username": None}

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: –æ—Ç–∫—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏ ¬´Message¬ª.")
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>PtoShkinDSU_bot</b> ü§ñ\n–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=MAIN_KB,
        parse_mode=ParseMode.HTML
    )
    await _audit("start", update, context, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –±–æ—Ç–∞")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    guide = (
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "üß© <b>FAQ</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´‚ùì –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å¬ª ‚Üí –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Üí –≤–æ–ø—Ä–æ—Å.\n\n"
        "üìå <b>–ü—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n"
        "‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª –∏–∑ <code>TARGET_CHAT_ID</code>.\n\n"
        "üìù <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (2 —à–∞–≥–∞)</b>\n"
        "1) –í –õ–°: <code>/post | –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è</code>\n"
        "2) –í —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç –ø—Ä–∏—à–ª–∏ Excel/PDF/–∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –±–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç –∏—Ö.\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –≤–º–µ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–π —É–∫–∞–∑–∞—Ç—å —Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤ –∏–∑ <code>data/</code>:\n"
        "  <code>/post –æ—Ç—á–µ—Ç_–æ–∫—Ç—è–±—Ä—å | –°–≤–æ–¥–∫–∞</code> ‚Äî —Ç–µ–∫—Å—Ç –ø–æ–ø–∞–¥—ë—Ç –≤ –ø–æ–¥–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞.\n\n"
        "‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞</b>\n"
        "‚Ä¢ <code>/send –¢–µ–∫—Å—Ç</code> ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤—É—é —Ç–µ–º—É/—á–∞—Ç.\n"
        "‚Ä¢ <code>/publish</code> ‚Äî –æ—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ –õ–° –Ω–∞ <i>—Å–≤–æ—ë</i> —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ ‚Äî –±–æ—Ç —Å–∫–æ–ø–∏—Ä—É–µ—Ç –≤ —Ç–µ–º—É.\n\n"
        "üßπ <b>–£–¥–∞–ª–µ–Ω–∏–µ</b>\n"
        "‚Ä¢ <code>/deleteme</code> (–≤ –≥—Ä—É–ø–ø–µ): –∫–∞–∫ –æ—Ç–≤–µ—Ç ‚Äî —É–¥–∞–ª–∏—Ç —Ü–µ–ª—å –∏ –∫–æ–º–∞–Ω–¥—É; –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É.\n"
        "‚Ä¢ <code>/cleanlast</code> (–≤ –õ–°, –¥–ª—è –∞–¥–º–∏–Ω–æ–≤): —É–¥–∞–ª–∏—Ç <i>–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞</i> –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ/—Ç–µ–º–µ.\n"
        "‚Ä¢ <code>/cleanhere</code> (–≤ –≥—Ä—É–ø–ø–µ, –¥–ª—è –∞–¥–º–∏–Ω–æ–≤): —É–¥–∞–ª–∏—Ç <i>–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞</i> –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ/—Ç–µ–º–µ.\n"
        "‚Ä¢ <code>/cleanchat [N]</code> (–≤ –≥—Ä—É–ø–ø–µ, –¥–ª—è –∞–¥–º–∏–Ω–æ–≤): –æ—á–∏—Å—Ç–∏—Ç –¥–æ N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ –±—É—Ñ–µ—Ä—É), –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤.\n"
        "‚Ä¢ <code>/purgehere</code> (–≤ –≥—Ä—É–ø–ø–µ, –¥–ª—è –∞–¥–º–∏–Ω–æ–≤): –æ—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —É–¥–∞–ª—é –≤—Å—ë –Ω–æ–≤–µ–µ –Ω–µ–≥–æ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 48 —á–∞—Å–æ–≤, –Ω–µ —Ç—Ä–æ–≥–∞—é –∞–¥–º–∏–Ω–æ–≤).\n\n"
        "üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´üí° –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞¬ª –∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –∞–¥–º–∏–Ω–æ–≤.\n\n"
        "üÜî <b>–°–ª—É–∂–µ–±–Ω—ã–µ</b>\n"
        "‚Ä¢ <code>/myid</code>, <code>/getchat</code>, <code>/listfiles</code>, <code>/reindex</code>, <code>/settarget</code>, <code>/settopic</code>.\n\n"
        "üîê <i>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</i>: –∫–æ–º–∞–Ω–¥—ã/–º–µ–Ω—é —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª–∏—á–∫–µ; –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–¥—É—Ç –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é —Ç–µ–º—É."
    )
    await update.message.reply_text(guide, parse_mode=ParseMode.HTML)
    await _audit("howto", update, context, "guide shown")

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid, uname = _fmt_user(update)
    await update.message.reply_text(f"üë§ –¢–≤–æ–π Telegram ID: {uid}\n–ò–º—è: {uname}")
    await _audit("myid", update, context, "–ü–æ–∫–∞–∑ —Å–≤–æ–µ–≥–æ ID")

async def getchat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    try:
        await context.bot.send_message(chat_id=update.effective_user.id, text=f"chat_id = {chat.id}")
    except Exception:
        await update.message.reply_text(f"chat_id = {chat.id}")
    if chat.type in ("group", "supergroup"):
        try:
            await context.bot.delete_message(chat_id=chat.id, message_id=update.message.message_id)
        except Exception:
            pass
    await _audit("getchat", update, context, f"chat_id={chat.id}")

# /deleteme ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å/–∫–æ–º–∞–Ω–¥—É
async def deleteme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram.error import TelegramError

    chat = update.effective_chat
    msg = update.message

    if chat.type not in ("group", "supergroup"):
        if _is_private(update):
            await msg.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    target = msg.reply_to_message or msg
    target_id = target.message_id

    try:
        me = await context.bot.get_me()
        me_id = me.id
        my_member = await context.bot.get_chat_member(chat.id, me_id)
        status = getattr(my_member, "status", "")
        can_delete = (status == "creator") or (status == "administrator" and bool(getattr(my_member, "can_delete_messages", False)))
        if not can_delete and (not msg.reply_to_message or (msg.reply_to_message and msg.reply_to_message.from_user and msg.reply_to_message.from_user.id != me_id)):
            try:
                await msg.reply_text("–ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≥–∞–ª–æ—á–∫–æ–π ¬´–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è¬ª. "
                                     "–°–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —è –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –∏ –±–µ–∑ —ç—Ç–æ–≥–æ.")
            except Exception:
                pass
            await _audit("deleteme_no_rights", update, context, f"status={status}")
            return
    except TelegramError as e:
        try:
            await msg.reply_text(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")
        except Exception:
            pass
        await _audit("deleteme_rights_error", update, context, str(e))
        return

    try:
        me = await context.bot.get_me()
        is_own = (target.from_user and target.from_user.id == me.id)
        if not is_own:
            tdate = target.date
            if tdate and tdate.tzinfo is None:
                tdate = tdate.replace(tzinfo=datetime.timezone.utc)
            if tdate and (now_utc() - tdate).total_seconds() > MAX_DELETE_AGE_SEC:
                try:
                    await msg.reply_text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ–ª—å—à–µ 48 —á–∞—Å–æ–≤.")
                except Exception:
                    pass
                await _audit("deleteme_too_old", update, context, "")
                return
    except Exception as e:
        await _audit("deleteme_age_check_error", update, context, str(e))

    try:
        await context.bot.delete_message(chat_id=chat.id, message_id=target_id)
        if msg.reply_to_message:
            try:
                await context.bot.delete_message(chat_id=chat.id, message_id=msg.message_id)
            except Exception:
                pass
        await _audit("deleteme_ok", update, context, f"deleted_msg_id={target_id}")
    except Exception as e:
        try:
            await msg.reply_text(f"‚ùå –ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å: {e}")
        except Exception:
            pass
        await _audit("deleteme_error", update, context, str(e))

# cleanlast / cleanhere
async def cleanlast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    uid = update.effective_user.id if update.effective_user else 0
    if uid not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return

    key = _last_target_key()
    msg_id = LAST_BOT_MSG.get(key)
    use_chat = TARGET_CHAT_ID
    use_thread = TARGET_THREAD_ID

    if not msg_id:
        found = _find_last_any_thread_for_target()
        if found:
            key, msg_id = found
            use_chat = key[0]
            use_thread = key[1] if key[1] != 0 else None

    if not (use_chat and msg_id):
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞/—Ç–µ–º—ã.")
        await _audit("cleanlast_no_msg", update, context, f"key={_last_target_key()}")
        return

    try:
        await context.bot.delete_message(chat_id=use_chat, message_id=msg_id)
        await update.message.reply_text("üßπ –£–¥–∞–ª–∏–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.")
        await _audit("cleanlast_ok", update, context, f"deleted_msg_id={msg_id}")
        LAST_BOT_MSG.pop(key, None)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å: {e}")
        await _audit("cleanlast_error", update, context, str(e))

async def cleanhere(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –°–í–û–Å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ/—Ç–µ–º–µ (—Ç–æ, —á—Ç–æ –ø–æ–º–Ω–∏—Ç —Ç—Ä–µ–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–æ–∫)."""
    chat = update.effective_chat
    uid = update.effective_user.id if update.effective_user else 0
    if uid not in POST_ADMINS:
        return
    thread_id = update.message.message_thread_id
    key = _key(chat.id, thread_id)
    msg_id = LAST_BOT_MSG.get(key)
    if not msg_id:
        try:
            await update.message.reply_text("–ó–¥–µ—Å—å –µ—â—ë –Ω–µ—Ç –º–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–º–Ω—é.")
        except Exception:
            pass
        await _audit("cleanhere_no_msg", update, context, f"key={key}")
        return
    try:
        await context.bot.delete_message(chat_id=chat.id, message_id=msg_id)
        try:
            await context.bot.delete_message(chat_id=chat.id, message_id=update.message.message_id)
        except Exception:
            pass
        await _audit("cleanhere_ok", update, context, f"deleted_msg_id={msg_id}")
        LAST_BOT_MSG.pop(key, None)
    except Exception as e:
        try:
            await update.message.reply_text(f"‚ùå –ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å: {e}")
        except Exception:
            pass
        await _audit("cleanhere_error", update, context, str(e))

# ---------- /cleanchat ‚Äî —Ä–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ –±—É—Ñ–µ—Ä—É RECENT) ----------
async def cleanchat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ/—á–∞—Ç–µ, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤."""
    from telegram.error import TelegramError

    chat = update.effective_chat
    msg = update.message
    uid = update.effective_user.id if update.effective_user else 0

    if chat.type not in ("group", "supergroup"):
        await msg.reply_text("–ö–æ–º–∞–Ω–¥—É /cleanchat –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return

    if uid not in POST_ADMINS:
        await msg.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return

    try:
        limit = int(context.args[0]) if context.args else 200
    except ValueError:
        limit = 200
    limit = max(1, min(limit, RECENT_MAX))

    try:
        admins = await context.bot.get_chat_administrators(chat.id)
        admin_ids = {a.user.id for a in admins}

        thread_id = msg.message_thread_id
        dq = _recent_deque(chat.id, thread_id)

        if not dq:
            await msg.reply_text("–ë—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –Ω–µ—á–µ–≥–æ —á–∏—Å—Ç–∏—Ç—å (–±–æ—Ç –Ω–µ –≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–π).")
            return

        now = now_utc()
        deleted = 0
        checked = 0
        for item in reversed(list(dq)[-limit:]):
            checked += 1
            uid_from = item.get("from_user_id")
            mid = item.get("message_id")
            mdate = item.get("date")
            if uid_from in admin_ids:
                continue
            if isinstance(mdate, datetime.datetime):
                if mdate.tzinfo is None:
                    mdate = mdate.replace(tzinfo=datetime.timezone.utc)
                if (now - mdate).total_seconds() > MAX_DELETE_AGE_SEC:
                    continue
            try:
                await context.bot.delete_message(chat.id, mid)
                deleted += 1
            except TelegramError:
                pass

        await msg.reply_text(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–æ {deleted}.")
        await _audit("cleanchat_ok", update, context, f"checked={checked}; deleted={deleted}")
    except Exception as e:
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        await _audit("cleanchat_error", update, context, str(e))

# ---------- /purgehere ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å—ë –Ω–æ–≤–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è-¬´—è–∫–æ—Ä—è¬ª ----------
async def purgehere(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –°–û–û–ë–©–ï–ù–ò–ï ‚Äî –±–æ—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ (–≤–∏–¥–µ–Ω–Ω—ã–µ –∏–º) —Å–æ–æ–±—â–µ–Ω–∏—è –ù–û–í–ï–ï —è–∫–æ—Ä—è,
    –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤ –∏ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤.
    """
    from telegram.error import TelegramError

    chat = update.effective_chat
    msg = update.message
    uid = update.effective_user.id if update.effective_user else 0

    if chat.type not in ("group", "supergroup"):
        await msg.reply_text("–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return
    if uid not in POST_ADMINS:
        await msg.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    if not msg.reply_to_message:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –°–û–û–ë–©–ï–ù–ò–ï, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å (—è —É–¥–∞–ª—é –≤—Å—ë –ù–û–í–ï–ï –Ω–µ–≥–æ).")
        return

    admins = await context.bot.get_chat_administrators(chat.id)
    admin_ids = {a.user.id for a in admins}

    thread_id = msg.message_thread_id
    dq = _recent_deque(chat.id, thread_id)
    if not dq:
        await msg.reply_text("–ë—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –Ω–µ—á–µ–≥–æ —á–∏—Å—Ç–∏—Ç—å (–±–æ—Ç –Ω–µ –≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–π).")
        return

    anchor_id = msg.reply_to_message.message_id
    now = now_utc()

    to_delete: List[int] = []
    for item in reversed(list(dq)):
        mid = item["message_id"]
        if mid <= anchor_id:
            break
        if item.get("from_user_id") in admin_ids:
            continue
        mdate = item.get("date")
        if isinstance(mdate, datetime.datetime):
            if mdate.tzinfo is None:
                mdate = mdate.replace(tzinfo=datetime.timezone.utc)
            if (now - mdate).total_seconds() > MAX_DELETE_AGE_SEC:
                continue
        to_delete.append(mid)

    deleted = 0
    for mid in to_delete:
        try:
            await context.bot.delete_message(chat.id, mid)
            deleted += 1
        except TelegramError:
            pass

    # —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    try:
        await context.bot.delete_message(chat.id, msg.message_id)
    except Exception:
        pass

    # –°–æ–æ–±—â–µ–Ω–∏–µ-–∏—Ç–æ–≥ (—É—á—Ç—ë–º –∫–∞–∫ ¬´–ø–æ—Å–ª–µ–¥–Ω–µ–µ¬ª –±–æ—Ç–∞ –≤ —ç—Ç–æ–π —Ç–µ–º–µ)
    try:
        m = await context.bot.send_message(chat.id, f"üßπ –ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ: {deleted}.", message_thread_id=thread_id)
        _set_last(chat.id, thread_id, m.message_id)
    except Exception:
        pass

    await _audit("purgehere", update, context, f"deleted={deleted}; anchor={anchor_id}")

async def listfiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    if not DATA_DIR.exists():
        await update.message.reply_text("–ü–∞–ø–∫–∞ data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await _audit("listfiles", update, context, "data/ not found")
        return
    files = [p.name for p in DATA_DIR.iterdir() if p.is_file()]
    if not files:
        await update.message.reply_text("–í –ø–∞–ø–∫–µ data/ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç.")
    else:
        msg = "üìÇ –§–∞–π–ª—ã –≤ data/:\n" + "\n".join(f"‚Ä¢ {f}" for f in files)
        await update.message.reply_text(msg)
    await _audit("listfiles", update, context, f"count={len(files)}")

async def settarget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    uid = update.effective_user.id if update.effective_user else 0
    if uid not in POST_ADMINS:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settarget <chat_id>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /settarget -1002454786265")
        return
    new_id = context.args[0].strip()
    global TARGET_CHAT_ID
    TARGET_CHAT_ID = new_id
    _save_target_chat(new_id)
    await update.message.reply_text(f"‚úÖ TARGET_CHAT_ID –æ–±–Ω–æ–≤–ª—ë–Ω: {new_id}")
    await _audit("settarget", update, context, f"TARGET_CHAT_ID={new_id}")

async def settopic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.")
        return
    uid = update.effective_user.id if update.effective_user else 0
    if uid not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    global TARGET_THREAD_ID
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settopic <thread_id> | /settopic 0 (—Å–±—Ä–æ—Å)")
        return
    try:
        val = int(context.args[0])
    except ValueError:
        await update.message.reply_text("thread_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    TARGET_THREAD_ID = None if val == 0 else val
    _save_target_thread(TARGET_THREAD_ID)
    await update.message.reply_text(f"‚úÖ TARGET_THREAD_ID = {TARGET_THREAD_ID}")
    await _audit("settopic", update, context, f"TARGET_THREAD_ID={TARGET_THREAD_ID}")

async def bindhere(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –Ω–æ –∏–∑ –≥–∞–π–¥–∞ —É–±—Ä–∞–Ω–∞.
    chat = update.effective_chat
    uid = update.effective_user.id if update.effective_user else 0
    if chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–í—ã–∑–æ–≤–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –Ω–∞–¥–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
        return
    if uid not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    thread_id = update.message.message_thread_id
    if not thread_id:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –í–ù–£–¢–†–ò —Ç–µ–º—ã (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ç–µ–º).")
        return
    global TARGET_CHAT_ID, TARGET_THREAD_ID
    TARGET_CHAT_ID = str(chat.id)
    _save_target_chat(TARGET_CHAT_ID)
    TARGET_THREAD_ID = int(thread_id)
    _save_target_thread(TARGET_THREAD_ID)
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ —Å—é–¥–∞.\nchat_id={TARGET_CHAT_ID}\nthread_id={TARGET_THREAD_ID}\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–π–¥—É—Ç –≤ —ç—Ç—É —Ç–µ–º—É."
    )
    await _audit("bindhere", update, context, f"chat={TARGET_CHAT_ID}, thread={TARGET_THREAD_ID}")

# ---------- –°–±–æ—Ä –≤–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è /post) ----------
def _collect_attachments_from_message(update: Update) -> List[Dict[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
       [{"type": "document"|"photo", "file_id": "<id>"}]"""
    atts: List[Dict[str, str]] = []
    msg = update.message
    if not msg:
        return atts
    if msg.document:
        atts.append({"type": "document", "file_id": msg.document.file_id})
    if msg.photo:
        best = max(msg.photo, key=lambda p: (p.file_size or 0))
        atts.append({"type": "photo", "file_id": best.file_id})
    return atts

# ---------- –ü—É–±–ª–∏–∫–∞—Ü–∏—è /post ----------
POST_PENDING: Dict[int, Dict[str, object]] = {}

async def cmd_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    uid = update.effective_user.id if update.effective_user else 0
    if not _is_post_admin(uid):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    raw_all = (update.message.text or update.message.caption or "").strip()
    after = raw_all.split(" ", 1)[1] if raw_all.lower().startswith("/post") and " " in raw_all else raw_all

    if "|" in after:
        stem_part, desc_part = after.split("|", 1)
        stems = _split_post_stems(stem_part.strip())
        desc = desc_part.strip()
    else:
        stems, desc = [], after.strip()

    attachments = _collect_attachments_from_message(update)

    if not attachments:
        POST_PENDING[update.effective_chat.id] = {"desc": desc, "stems": stems, "ts": time.time()}
        await update.message.reply_text(
            "–ü—Ä–∏–Ω—è—Ç–æ. –ñ–¥—É —Ñ–∞–π–ª(—ã) Excel/PDF/–∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–¥–æ 3 –º–∏–Ω—É—Ç). "
            "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤ –∏–∑ data/. –ö–∞–∫ –ø—Ä–∏—à–ª—ë—à—å ‚Äî –æ–ø—É–±–ª–∏–∫—É—é."
        )

    await _audit("post_command", update, context, f"desc_len={len(desc)}; stems={','.join(stems) if stems else '-'}")
    await _do_publish(update, context, desc, stems, attachments)

async def _do_publish(update: Update, context: ContextTypes.DEFAULT_TYPE, desc: str, stems: List[str], attachments: List[Dict[str, str]]):
    files_from_data: List[Path] = []
    missing: List[str] = []
    for stem in stems:
        if not _is_safe_stem(stem):
            await update.message.reply_text(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {stem}")
            await _audit("post_error", update, context, f"unsafe_stem={stem}")
            return
        matched = _find_files_by_stem_fast(stem)
        (files_from_data.append(matched[0]) if matched else missing.append(stem))
    if missing:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: " + ", ".join(missing))

    try:
        sent_any = False

        if attachments:
            for i, att in enumerate(attachments):
                cap = desc if (i == 0 and desc) else None
                if att["type"] == "document":
                    await _send_target_document(context, att["file_id"], caption=cap, parse_mode=ParseMode.HTML if cap else None)
                elif att["type"] == "photo":
                    await _send_target_photo(context, att["file_id"], caption=cap, parse_mode=ParseMode.HTML if cap else None)
            sent_any = True

        if files_from_data:
            if not sent_any and desc:
                first, *rest = files_from_data
                with open(first, "rb") as f:
                    await _send_target_document(context, f, filename=first.name, caption=desc, parse_mode=ParseMode.HTML)
                for p in rest:
                    with open(p, "rb") as f:
                        await _send_target_document(context, f, filename=p.name)
            else:
                for p in files_from_data:
                    with open(p, "rb") as f:
                        await _send_target_document(context, f, filename=p.name)
            sent_any = True

        if not sent_any:
            if desc:
                await _send_target_message(context, text=desc, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(
                    "–ù–µ—á–µ–≥–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: –Ω–∏ –≤–ª–æ–∂–µ–Ω–∏–π, –Ω–∏ —Å—Ç–µ–º–æ–≤, –Ω–∏ –æ–ø–∏—Å–∞–Ω–∏—è.\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post <—Å—Ç–µ–º[,—Å—Ç–µ–º2]> | <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª(—ã)."
                )
                await _audit("post_error", update, context, "nothing to publish")
                return

        await update.message.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        await _audit("post_published", update, context, f"desc_len={len(desc)}; att={len(attachments)}; files={len(files_from_data)}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s", e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await _audit("post_error", update, context, str(e))

async def capture_post_attachments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    chat_id = update.effective_chat.id
    pending = POST_PENDING.get(chat_id)
    if not pending:
        return
    if time.time() - float(pending.get("ts", 0)) > MAX_POST_WAIT_SEC:
        POST_PENDING.pop(chat_id, None)
        return

    atts = _collect_attachments_from_message(update)
    if not atts:
        return

    desc = str(pending.get("desc") or "")
    stems = list(pending.get("stems") or [])
    POST_PENDING.pop(chat_id, None)

    await _audit("post_attachments", update, context, f"count={len(atts)}; desc_len={len(desc)}")
    await _do_publish(update, context, desc, stems, atts)

# ---------- FAQ / –∫–Ω–æ–ø–∫–∏ / –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ----------
async def howto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ –∫–∞–∫ guide; —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è"
    return await help_cmd(update, context)

async def crab(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ª–æ–≤–∏ –∫—Ä–∞–±–∞ –æ—Ç –º–æ–µ–π –º–µ–¥–≤–µ–∂—å–µ–π –ª–∞–ø—ã! ü¶Äüêª")
    await _audit("button_hello", update, context, "crab")

# ---------- FAQ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ----------
@dataclass
class _FAQRepo:
    xlsx_path: Path
    data: Dict[str, List[FAQItem]]

class FAQRepository:
    def __init__(self, xlsx_path: Path):
        self.xlsx_path = xlsx_path
        self.data: Dict[str, List[FAQItem]] = {}

    def load(self) -> None:
        if not self.xlsx_path.exists():
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {self.xlsx_path}")
        book: Dict[str, pd.DataFrame] = pd.read_excel(
            self.xlsx_path, sheet_name=None, dtype=str, engine="openpyxl"
        )
        normalized: Dict[str, List[FAQItem]] = {}
        for sheet, df in book.items():
            if df is None or df.empty:
                continue
            df = df.replace(r"^\s*$", pd.NA, regex=True).dropna(how="all").fillna("")
            if df.empty:
                continue
            if sheet.strip() in SPECIAL_BCD_SHEETS:
                items = self._parse_special_bcd(df)
            else:
                items = self._parse_generic(df)
            items = [it for it in items if it.question and it.question.strip()]
            if items:
                normalized[sheet] = items
        if not normalized:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å FAQ –Ω–∏ —Å –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ Excel.")
        self.data = normalized

    def _extract_files_from_row(self, df: pd.DataFrame, row: pd.Series) -> List[str]:
        file_cols = [c for c in df.columns if ("—Ñ–∞–π–ª" in c.lower()) or ("file" in c.lower())]
        if not file_cols:
            return []
        cell = _norm(str(row[file_cols[0]]))
        if not cell or cell.lower() == "nan":
            return []
        return _split_files_cell(cell)

    def _parse_special_bcd(self, df: pd.DataFrame) -> List[FAQItem]:
        if df.shape[1] < 4:
            return []
        items: List[FAQItem] = []
        for _, row in df.iterrows():
            q  = _norm(str(row.iloc[0]))
            a1 = _norm(str(row.iloc[1])) or None
            a2 = _norm(str(row.iloc[2])) or None
            cm = _norm(str(row.iloc[3])) or None
            if not q:
                continue
            files = self._extract_files_from_row(df, row)
            items.append(FAQItem(question=q, answer_1=a1, answer_2=a2, comment=cm, files=files or None))
        return items

    def _parse_generic(self, df: pd.DataFrame) -> List[FAQItem]:
        cols = list(df.columns)
        q_col = _pick_one_column(cols, ["–≤–æ–ø—Ä–æ—Å", "—Ç–µ–º–∞", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∑–∞–≥–æ–ª–æ–≤–æ–∫"]) or cols[0]
        answer_cols = _pick_many_columns(
            cols,
            ["–æ—Ç–≤–µ—Ç", "–æ–ø–∏—Å–∞–Ω–∏–µ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫", "–≥–¥–µ",
             "–∫–æ–Ω—Ç–∞–∫—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "email", "–ø–æ—á—Ç–∞", "—Å—Å—ã–ª–∫–∞", "–∞–¥—Ä–µ—Å", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä"],
            exclude=q_col
        ) or (cols[1:2] if len(cols) > 1 else [])
        items: List[FAQItem] = []

        for _, row in df.iterrows():
            q = _norm(str(row[q_col]))
            if not q:
                continue
            parts: List[str] = []
            multi = len(answer_cols) > 1
            for c in answer_cols:
                val = _norm(str(row[c]))
                if val and val.lower() != "nan":
                    parts.append(f"<b>{c}:</b> {val}" if multi else val)
            answer_text = "\n\n".join(parts) if parts else None
            files = self._extract_files_from_row(df, row)
            if answer_text or files:
                items.append(FAQItem(question=q, answer=answer_text, files=files or None))
        return items

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ----------
repo = FAQRepository(XLSX_PATH)
repo.load()
CATEGORIES: List[str] = list(repo.data.keys())
ALL_QUESTIONS: List[Tuple[str, str]] = [(cat, it.question) for cat, items in repo.data.items() for it in items]
USER_CATEGORY: Dict[int, Optional[str]] = {}
USER_FLOW: Dict[int, Flow] = {}

# ---------- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ----------
async def suggest_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    uid = update.effective_user.id
    USER_FLOW[uid] = Flow.AWAIT_SUGGEST
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫–∏/–æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è –≤—Å—ë –ø–µ—Ä–µ–∫–∏–Ω—É –∞–¥–º–∏–Ω—É. ‚úçÔ∏è"
    )
    await _audit("suggest_start", update, context, "")

async def suggest_capture(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        return
    uid = update.effective_user.id
    if USER_FLOW.get(uid) != Flow.AWAIT_SUGGEST:
        return

    txt = (update.message.text or "").strip()
    if not txt:
        return

    if not _rate_limit_suggest(uid):
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–æ–≤–∞ üôè")
        await _audit("suggest_ratelimited", update, context, "")
        return

    _append_suggestion(
        chat_id=update.effective_chat.id,
        user_id=uid,
        username=f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.full_name,
        text=txt
    )

    notified = 0
    try:
        msg = (
            "üí° <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
            f"–û—Ç: <code>{uid}</code> "
            f"{html.escape('@'+update.effective_user.username) if update.effective_user.username else html.escape(update.effective_user.full_name)}\n\n"
            f"{html.escape(txt)}"
        )
        if SUGGEST_CHAT_ID:
            try:
                await context.bot.send_message(chat_id=SUGGEST_CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
                notified += 1
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ SUGGEST_CHAT_ID")
        else:
            for admin_id in SUGGEST_ADMINS:
                try:
                    await context.bot.send_message(chat_id=admin_id, text=msg, parse_mode=ParseMode.HTML)
                    notified += 1
                except Exception:
                    pass
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º")

    USER_FLOW[uid] = Flow.NONE
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ.")
    await _audit("suggest_captured", update, context, f"notified={notified}")

# --- –•—É–∫ —Å—Ç–∞—Ä—Ç–∞ ---
async def _on_start(app: Application):
    _build_file_index()
    _load_target_chat()
    _load_target_thread()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ (–≤–∞–∂–Ω–æ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏—è—Ö/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö)
    await app.bot.delete_webhook(drop_pending_updates=True)

    me = await app.bot.get_me()
    BOT_INFO["id"] = me.id
    BOT_INFO["username"] = me.username
    logger.info("Bot started as @%s (id=%s), target=%s, thread=%s", me.username, me.id, TARGET_CHAT_ID, TARGET_THREAD_ID)

# ---------- –†–æ—É—Ç–∏–Ω–≥ ----------
def build_app() -> Application:
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(_on_start).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("getchat", getchat), group=0)
    app.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("help", help_cmd, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("listfiles", listfiles, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("myid", myid), group=0)
    app.add_handler(CommandHandler("post", cmd_post, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("send", send_text, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("publish", publish_reply, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("reindex", cmd_reindex, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("settarget", settarget, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("settopic", settopic, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("bindhere", bindhere), group=0)
    app.add_handler(CommandHandler("deleteme", deleteme), group=0)
    app.add_handler(CommandHandler("cleanlast", cleanlast, filters=filters.ChatType.PRIVATE), group=0)
    app.add_handler(CommandHandler("cleanhere", cleanhere), group=0)
    app.add_handler(CommandHandler("cleanchat", cleanchat), group=0)
    app.add_handler(CommandHandler("purgehere", purgehere), group=0)

    # –ö–Ω–æ–ø–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(r"^üêª (–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è|–õ–æ–≤–∏ –∫—Ä–∞–±–∞)$"),
        crab
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_ASK)}$"),
        lambda u, c: u.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=ReplyKeyboardMarkup([[x] for x in CATEGORIES] + [[BTN_BACK]], resize_keyboard=True))
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_SUGG)}$"),
        lambda u, c: suggest_start(u, c)
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_HOWTO)}$"),
        help_cmd
    ), group=1)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & filters.Regex(rf"^{re.escape(BTN_BACK)}$"),
        lambda u, c: u.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=MAIN_KB)
    ), group=1)

    # –í–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ /post ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & (filters.Document.ALL | filters.PHOTO) & ~filters.COMMAND,
        capture_post_attachments
    ), group=1)

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
        suggest_capture
    ), group=2)

    # –¢—Ä–µ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∏—Å—Ç–æ–∫ ‚Äî –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö/—Ç–µ–º–∞—Ö
    app.add_handler(MessageHandler(
        filters.ChatType.GROUPS & ~filters.COMMAND,
        track_recent
    ), group=9)

    return app

# ---------- –°–ª—É–∂–µ–±–Ω—ã–µ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ----------
async def send_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    user_id = update.effective_user.id if update.effective_user else 0
    if not _is_post_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return
    raw = (update.message.text or "").strip()
    payload = raw.split(" ", 1)[1].strip() if " " in raw else ""
    if not payload:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    try:
        await _send_target_message(context, text=payload, parse_mode=ParseMode.HTML)
        await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        await _audit("send", update, context, f"text_len={len(payload)}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: %s", e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await _audit("send_error", update, context, str(e))

async def publish_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    user_id = update.effective_user.id if update.effective_user else 0
    if not _is_post_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return
    msg = update.message
    if not msg.reply_to_message:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ç–µ–∫—Å—Ç–æ–º/–º–µ–¥–∏–∞), –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
        return
    if not msg.reply_to_message.from_user or msg.reply_to_message.from_user.id != user_id:
        await msg.reply_text("–ú–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    try:
        mid = await context.bot.copy_message(
            chat_id=TARGET_CHAT_ID,
            from_chat_id=msg.chat.id,
            message_id=msg.reply_to_message.message_id,
            **_thread_kwargs()
        )
        _set_last(TARGET_CHAT_ID, TARGET_THREAD_ID, mid.message_id)
        await msg.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        await _audit("publish", update, context, "copy_message")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–ø–∏–µ–π: %s", e)
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await _audit("publish_error", update, context, str(e))

async def cmd_reindex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    u = update.effective_user
    if not u or u.id not in POST_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    _build_file_index()
    await update.message.reply_text("üîÑ –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω.")
    await _audit("reindex", update, context, "rebuild file index")

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
if __name__ == "__main__":
    print(f"[DEBUG] BASE_DIR: {BASE_DIR}")
    print(f"[DEBUG] XLSX_PATH: {XLSX_PATH} (exists={XLSX_PATH.exists()})")
    app = build_app()
    print("Bot is starting‚Ä¶")

    BASE_URL = os.getenv("BASE_URL", "").rstrip("/")
    port = int(os.getenv("PORT", "8000"))

    if BASE_URL:
        webhook_path = f"/{BOT_TOKEN}"
        full_url = f"{BASE_URL}{webhook_path}"
        print(f"[DEBUG] Using WEBHOOK at {full_url} (port={port})")
        # –í–µ–±—Ö—É–∫-—Ä–µ–∂–∏–º –¥–ª—è Koyeb
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=full_url,
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=True,
            allowed_updates=["message"],
            stop_signals=None,
        )
    else:
        print("[DEBUG] Using POLLING mode")
        app.run_polling(
            close_loop=False,
            drop_pending_updates=True,
            allowed_updates=["message"],
            stop_signals=None,
        )